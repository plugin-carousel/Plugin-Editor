/*
              The default normalizer inserts an empty text node in this scenario, but it can be customised.
              So there is some risk here.
                         As long as the normalizer only inserts child nodes for this case it is safe to do in any order;
              by definition adding children to an empty node can't cause other paths to change.
            */

/*
         * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks
         */

/*
         * TEXT LEAF NODE - Iterate through text content, yielding
         * positions every `distance` offset according to `unit`.
         */

/*
        Fix dirty elements with no children.
        editor.normalizeNode() does fix this, but some normalization fixes also require it to work.
        Running an initial pass avoids the catch-22 race condition.
      */

/*
    Deep object equality is only necessary in one direction; in the reverse direction
    we are only looking for keys that are missing.
    As above, undefined keys are normalised to missing.
  */

/*
 * -- Sort methods
 */

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* #__PURE__ */

/* .StringDecoder */

/* .array */

/* .channel */

/* .codes */

/* .codes.ERR_INVALID_OPT_VALUE */

/* .codes.ERR_STREAM_PREMATURE_CLOSE */

/* .func */

/* .multicast */

/* .notUndef */

/* .pattern */

/* .string */

/* .undef */

/* 0 */

/* 1 */

/* 10 */

/* 100 */

/* 101 */

/* 102 */

/* 103 */

/* 104 */

/* 105 */

/* 106 */

/* 107 */

/* 108 */

/* 109 */

/* 11 */

/* 110 */

/* 111 */

/* 112 */

/* 113 */

/* 114 */

/* 115 */

/* 116 */

/* 117 */

/* 118 */

/* 119 */

/* 12 */

/* 120 */

/* 121 */

/* 122 */

/* 123 */

/* 124 */

/* 125 */

/* 126 */

/* 127 */

/* 128 */

/* 129 */

/* 13 */

/* 130 */

/* 131 */

/* 132 */

/* 133 */

/* 134 */

/* 135 */

/* 136 */

/* 137 */

/* 138 */

/* 139 */

/* 14 */

/* 140 */

/* 141 */

/* 142 */

/* 143 */

/* 144 */

/* 145 */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 15 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

/* 154 */

/* 155 */

/* 156 */

/* 157 */

/* 158 */

/* 159 */

/* 16 */

/* 160 */

/* 161 */

/* 162 */

/* 163 */

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

/* 169 */

/* 17 */

/* 170 */

/* 171 */

/* 172 */

/* 173 */

/* 174 */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* 179 */

/* 18 */

/* 180 */

/* 181 */

/* 182 */

/* 183 */

/* 184 */

/* 185 */

/* 186 */

/* 187 */

/* 188 */

/* 189 */

/* 19 */

/* 190 */

/* 191 */

/* 192 */

/* 193 */

/* 194 */

/* 195 */

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 2 */

/* 20 */

/* 200 */

/* 201 */

/* 202 */

/* 203 */

/* 204 */

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

/* 21 */

/* 210 */

/* 211 */

/* 212 */

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/* 217 */

/* 218 */

/* 219 */

/* 22 */

/* 220 */

/* 221 */

/* 222 */

/* 223 */

/* 224 */

/* 225 */

/* 226 */

/* 227 */

/* 228 */

/* 229 */

/* 23 */

/* 230 */

/* 231 */

/* 232 */

/* 233 */

/* 234 */

/* 235 */

/* 236 */

/* 237 */

/* 238 */

/* 239 */

/* 24 */

/* 240 */

/* 241 */

/* 242 */

/* 243 */

/* 244 */

/* 245 */

/* 246 */

/* 247 */

/* 248 */

/* 249 */

/* 25 */

/* 250 */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

/* 257 */

/* 258 */

/* 259 */

/* 26 */

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/* 267 */

/* 268 */

/* 269 */

/* 27 */

/* 270 */

/* 271 */

/* 272 */

/* 273 */

/* 274 */

/* 275 */

/* 276 */

/* 277 */

/* 278 */

/* 279 */

/* 28 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

/* 286 */

/* 287 */

/* 288 */

/* 289 */

/* 29 */

/* 290 */

/* 291 */

/* 292 */

/* 293 */

/* 294 */

/* 295 */

/* 296 */

/* 297 */

/* 298 */

/* 299 */

/* 3 */

/* 30 */

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 31 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 32 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 33 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 34 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

/* 349 */

/* 35 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

/* 355 */

/* 356 */

/* 357 */

/* 358 */

/* 359 */

/* 36 */

/* 360 */

/* 361 */

/* 362 */

/* 363 */

/* 364 */

/* 365 */

/* 366 */

/* 367 */

/* 368 */

/* 369 */

/* 37 */

/* 370 */

/* 371 */

/* 372 */

/* 373 */

/* 374 */

/* 375 */

/* 376 */

/* 377 */

/* 378 */

/* 379 */

/* 38 */

/* 380 */

/* 381 */

/* 382 */

/* 383 */

/* 384 */

/* 385 */

/* 386 */

/* 387 */

/* 388 */

/* 389 */

/* 39 */

/* 390 */

/* 391 */

/* 392 */

/* 393 */

/* 394 */

/* 395 */

/* 396 */

/* 397 */

/* 398 */

/* 399 */

/* 4 */

/* 40 */

/* 400 */

/* 401 */

/* 402 */

/* 403 */

/* 404 */

/* 405 */

/* 406 */

/* 407 */

/* 408 */

/* 409 */

/* 41 */

/* 410 */

/* 411 */

/* 412 */

/* 413 */

/* 414 */

/* 415 */

/* 416 */

/* 417 */

/* 418 */

/* 419 */

/* 42 */

/* 420 */

/* 421 */

/* 422 */

/* 423 */

/* 424 */

/* 425 */

/* 426 */

/* 427 */

/* 428 */

/* 429 */

/* 43 */

/* 430 */

/* 431 */

/* 432 */

/* 433 */

/* 434 */

/* 435 */

/* 436 */

/* 437 */

/* 438 */

/* 439 */

/* 44 */

/* 440 */

/* 441 */

/* 442 */

/* 443 */

/* 444 */

/* 445 */

/* 446 */

/* 447 */

/* 448 */

/* 449 */

/* 45 */

/* 450 */

/* 451 */

/* 452 */

/* 453 */

/* 454 */

/* 455 */

/* 456 */

/* 457 */

/* 458 */

/* 459 */

/* 46 */

/* 460 */

/* 461 */

/* 462 */

/* 463 */

/* 464 */

/* 465 */

/* 466 */

/* 467 */

/* 468 */

/* 469 */

/* 47 */

/* 470 */

/* 471 */

/* 472 */

/* 473 */

/* 474 */

/* 475 */

/* 476 */

/* 477 */

/* 48 */

/* 49 */

/* 5 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 6 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

/* 65 */

/* 66 */

/* 67 */

/* 68 */

/* 69 */

/* 7 */

/* 70 */

/* 71 */

/* 72 */

/* 73 */

/* 74 */

/* 75 */

/* 76 */

/* 77 */

/* 78 */

/* 79 */

/* 8 */

/* 80 */

/* 81 */

/* 82 */

/* 83 */

/* 84 */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 9 */

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

/* 96 */

/* 97 */

/* 98 */

/* 99 */

/* <------------------------------------ **** DEPENDENCE IMPORT END **** ------------------------------------ */

/* <------------------------------------ **** DEPENDENCE IMPORT START **** ------------------------------------ */

/* <------------------------------------ **** FUNCTION COMPONENT END **** ------------------------------------ */

/* <------------------------------------ **** FUNCTION COMPONENT START **** ------------------------------------ */

/* <------------------------------------ **** FUNCTION END **** ------------------------------------ */

/* <------------------------------------ **** FUNCTION START **** ------------------------------------ */

/* <------------------------------------ **** HOOKS END **** ------------------------------------ */

/* <------------------------------------ **** HOOKS START **** ------------------------------------ */

/* <------------------------------------ **** INTERFACE END **** ------------------------------------ */

/* <------------------------------------ **** INTERFACE START **** ------------------------------------ */

/* <------------------------------------ **** PARAMETER END **** ------------------------------------ */

/* <------------------------------------ **** PARAMETER START **** ------------------------------------ */

/* <------------------------------------ **** STATE END **** ------------------------------------ */

/* <------------------------------------ **** STATE START **** ------------------------------------ */

/* <------------------------------------ **** STATES END **** ------------------------------------ */

/* </replacement> */

/* Editable */

/* Slate */

/* ["default"] */

/* array */

/* binding */

/* channel */

/* createRoot */

/* default */

/* default.Cancel */

/* default.addResourceBundle */

/* default.create */

/* default.getResource */

/* default.isCancel */

/* default.language */

/* default.t */

/* eslint complexity: [2, 18], max-statements: [2, 33] */

/* eslint no-invalid-this: 1 */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable no-console */

/* eslint-disable no-empty */

/* eslint-disable no-fallthrough */

/* eslint-disable no-proto */

/* eslint-disable no-restricted-properties */

/* eslint-disable node/no-deprecated-api */

/* eslint-enable */

/* eslint-enable no-console */

/* eslint-enable no-empty */

/* eslint-env node */

/* func */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* global window */

/* globals document: false */

/* harmony default export */

/* harmony export */

/* harmony import */

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

/* import() */

/* isRoot */

/* istanbul ignore next */

/* iterator */

/* legacy: obj, showHidden, depth, colors*/

/* module decorator */

/* notUndef */

/* promise */

/* provided dependency */

/* reexport */

/* string */

/* stringableFunc */

/* symbol */

/* undef */

/* unused harmony exports $, H, I, O, Q, U, V, W, X, Z, a0, a1, a2, a3, a4, a5, a6, a7, c, n, w, x */

/* useFocused */

/* useSelected */

/* useSlateSelector */

/* useSlateStatic */

/* useTranslation */

/* withHistory */

/* withReact */

/*!
 * @kurkle/color v0.2.1
 * https://github.com/kurkle/color#readme
 * (c) 2022 Jukka Kurkela
 * Released under the MIT License
 */

/*!
 * Chart.js v3.8.2
 * https://www.chartjs.org
 * (c) 2022 Chart.js Contributors
 * Released under the MIT License
 */

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/*! https://mths.be/punycode v1.3.2 by @mathias */

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

/*#__PURE__*/

/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */

/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */

/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */

/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */

/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */

/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */

/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */

/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */

/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */

/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */

/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */

/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */

/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */

/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */

/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */

/**
           * code maybe has The following results：
           *   cn:hk , cn:mo
           * Filter strings retain only countries
           */

/**
           * 列 的class
           */

/**
           * 列 的style
           */

/**
           * 列的 值
           */

/**
           * 如果有自定义的展示状态
           * 则取消内部的交互
           */

/**
           * 获取完成
           */

/**
          Cancels the current effect; this will propagate the cancellation down to any called tasks
        **/

/**
          If this Generator has a `return` method then invokes it
          This will jump to the finally block
        **/

/**
          This Generator has ended, terminate the main task and notify the fork queue
        **/

/**
          getting TASK_CANCEL automatically cancels the main task
          We can get this value here
           - By cancelling the parent task manually
          - By joining a Cancelled task
        **/

/**
         * 为什么要加1比较
         *   因为 这个
         */

/**
         * 开始获取
         */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
       * 回归不可见状态
       */

/**
       * 开始为获取宽高 添加它应有的属性
       */

/**
       * 每个 header列的class
       */

/**
       * 每个 header列的style
       */

/**
       * 这里记录了状态
       */

/**
      each effect runner must attach its own logic of cancellation to the provided callback
      it allows this generator to propagate cancellation downward.
       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]
      And the setup must occur before calling the callback
       This is a sort of inversion of control: called async functions are responsible
      of completing the flow by calling the provided continuation; while caller functions
      are responsible for aborting the current flow by calling the attached cancel function
       Library users can attach their own cancellation logic to promises by defining a
      promise[CANCEL] method in their returned promises
      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect
    **/

/**
     * 1 => overflow
     * 0 => free
     */

/**
     * Add a new item to the queue and ensure the highest priority element
     * is at the front of the queue.
     */

/**
     * Algorithm notes:
     *
     * Each step `distance` is dynamic depending on the underlying text
     * and the `unit` specified.  Each step, e.g., a line or word, may
     * span multiple text nodes, so we iterate through the text both on
     * two levels in step-sync:
     *
     * `leafText` stores the text on a text leaf level, and is advanced
     * through using the counters `leafTextOffset` and `leafTextRemaining`.
     *
     * `blockText` stores the text on a block level, and is shortened
     * by `distance` every time it is advanced.
     *
     * We only maintain a window of one blockText and one leafText because
     * a block node always appears before all of its leaf nodes.
     */

/**
     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment
     */

/**
     * Get the "dirty" paths generated from an operation.
     */

/**
     * Return the highest priority element in the queue.
     */

/**
     * 为了避免不必要的递归
     * 这里做了处理
     * 如果找到的element包含在els里面 就没必要在向上找了
     * 因为 本地el就是els里 一会这个 找的element也会被再找一遍 所以可以return出去
     */

/**
     * 如果有自定义的展示状态
     * 则取消内部的交互
     */

/**
     * 当可见时
     * 过渡结束时
     */

/**
     * 当可见时
     */

/**
     * 添加或删除className
     */

/**
     * 计算位置
     */

/**
     * 赋值 portal的size
     */

/**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */

/**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

/**
    Tracks the current effect cancellation
    Each time the generator progresses. calling runEffect will set a new value
    on it. It allows propagating cancellation to child effects
  **/

/**
    attaches cancellation logic to this task's continuation
    this will permit cancellation to propagate down the call chain
  **/

/**
    cancellation of the main task. We'll simply resume the Generator with a TASK_CANCEL
  **/

/**
   *
   * @param e 当移动时
   * @returns
   */

/**
   *
   * handle the style and icon  for each type
   */

/**
   *
   */

/**
   *  percent value range should be 0-100
   */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/**
   * A very naive priority queue implementation.
   */

/**
   * Add a custom property to the leaf text nodes in the current selection.
   *
   * If the selection is currently collapsed, the marks will be added to the
   * `editor.marks` property instead, and applied when text is inserted next.
   */

/**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Apply a series of changes inside a synchronous `fn`, without merging any of
   * the new operations into previous save point in the history.
   */

/**
   * Apply a series of changes inside a synchronous `fn`, without saving any of
   * their operations into the history.
   */

/**
   * Blur the editor.
   */

/**
   * Call a function, deferring normalization until after it completes.
   */

/**
   * Check if a DOM node is within the editor.
   */

/**
   * Check if a descendant node exists at a specific path.
   */

/**
   * Check if a node has block children.
   */

/**
   * Check if a node has inline and text children.
   */

/**
   * Check if a node has text children.
   */

/**
   * Check if a node matches a set of props.
   */

/**
   * Check if a path ends after one of the indexes in another.
   */

/**
   * Check if a path ends at one of the indexes in another.
   */

/**
   * Check if a path ends before one of the indexes in another.
   */

/**
   * Check if a path is a child of another.
   */

/**
   * Check if a path is a descendant of another.
   */

/**
   * Check if a path is a sibling of another.
   */

/**
   * Check if a path is after another.
   */

/**
   * Check if a path is an ancestor of another.
   */

/**
   * Check if a path is before another.
   */

/**
   * Check if a path is equal to or an ancestor of another.
   */

/**
   * Check if a path is exactly equal to another.
   */

/**
   * Check if a path is the parent of another.
   */

/**
   * Check if a point is after another.
   */

/**
   * Check if a point is an edge of a location.
   */

/**
   * Check if a point is before another.
   */

/**
   * Check if a point is exactly equal to another.
   */

/**
   * Check if a point is the end point of a location.
   */

/**
   * Check if a point is the start point of a location.
   */

/**
   * Check if a range includes a path, a point or part of another range.
   */

/**
   * Check if a range is backward, meaning that its anchor point appears in the
   * document _after_ its focus point.
   */

/**
   * Check if a range is collapsed, meaning that both its anchor and focus
   * points refer to the exact same position in the document.
   */

/**
   * Check if a range is exactly equal to another.
   */

/**
   * Check if a range is expanded.
   *
   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.
   */

/**
   * Check if a range is forward.
   *
   * This is the opposite of [[Range.isBackward]] and is provided for legibility.
   */

/**
   * Check if a set of props is a partial of Element.
   */

/**
   * Check if a value implements the 'Ancestor' interface.
   */

/**
   * Check if a value implements the [[Range]] interface.
   */

/**
   * Check if a value implements the `Element` interface and has elementKey with selected value.
   * Default it check to `type` key value
   */

/**
   * Check if a value implements the `Element` interface.
   */

/**
   * Check if a value implements the `Location` interface.
   */

/**
   * Check if a value implements the `Node` interface.
   */

/**
   * Check if a value implements the `Point` interface.
   */

/**
   * Check if a value implements the `Span` interface.
   */

/**
   * Check if a value implements the `Text` interface.
   */

/**
   * Check if a value is a `HistoryEditor` object.
   */

/**
   * Check if a value is a `History` object.
   */

/**
   * Check if a value is a block `Element` object.
   */

/**
   * Check if a value is a list of `Node` objects.
   */

/**
   * Check if a value is a list of `Operation` objects.
   */

/**
   * Check if a value is a list of `Text` objects.
   */

/**
   * Check if a value is a void `Element` object.
   */

/**
   * Check if a value is an `Editor` object.
   */

/**
   * Check if a value is an array of `Element` objects.
   */

/**
   * Check if a value is an inline `Element` object.
   */

/**
   * Check if an element is empty, accounting for void nodes.
   */

/**
   * Check if an element matches set of properties.
   *
   * Note: this checks custom properties, and it does not ensure that any
   * children are equivalent.
   */

/**
   * Check if an text matches set of properties.
   *
   * Note: this is for matching custom properties, and it does not ensure that
   * the `text` property are two nodes equal.
   */

/**
   * Check if some props are a partial of Text.
   */

/**
   * Check if the editor is currently normalizing after each operation.
   */

/**
   * Check if the editor is focused.
   */

/**
   * Check if the editor is in read-only mode.
   */

/**
   * Check if the path of previous sibling node exists
   */

/**
   * Check if the user is currently composing inside the editor.
   */

/**
   * Check if two text nodes are equal.
   *
   * When loose is set, the text is not compared. This is
   * used to check whether sibling text nodes can be merged.
   */

/**
   * Check is a value implements the `Path` interface.
   */

/**
   * Check of a value is a `NodeOperation` object.
   */

/**
   * Check of a value is a `SelectionOperation` object.
   */

/**
   * Check of a value is a `TextOperation` object.
   */

/**
   * Check of a value is an `Operation` object.
   */

/**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */

/**
   * Collapse the selection.
   */

/**
   * Compare a path to another, returning an integer indicating whether the path
   * was before, at, or after the other.
   *
   * Note: Two paths of unequal length can still receive a `0` result if one is
   * directly above or below the other. If you want exact matching, use
   * [[Path.equals]] instead.
   */

/**
   * Compare a point to another, returning an integer indicating whether the
   * point was before, at, or after the other.
   */

/**
   * Convert a range into a non-hanging one.
   */

/**
   * Create a mutable ref for a `Path` object, which will stay in sync as new
   * operations are applied to the editor.
   */

/**
   * Create a mutable ref for a `Point` object, which will stay in sync as new
   * operations are applied to the editor.
   */

/**
   * Create a mutable ref for a `Range` object, which will stay in sync as new
   * operations are applied to the editor.
   */

/**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */

/**
   * Delete content in the editor backward from the current selection.
   */

/**
   * Delete content in the editor forward from the current selection.
   */

/**
   * Delete content in the editor.
   */

/**
   * Delete the content in the current selection.
   */

/**
   * Deselect the editor.
   */

/**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Experimental and android specific: Flush all pending diffs and cancel composition at the next possible time.
   */

/**
   * Experimental and android specific: Get pending diffs
   */

/**
   * Extract props from a Node.
   */

/**
   * Find a Slate node from a native DOM `element`.
   */

/**
   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.
   */

/**
   * Find a Slate range from a DOM range or selection.
   */

/**
   * Find a key for a Slate node.
   */

/**
   * Find a native DOM range from a Slate `range`.
   *
   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.
   *
   * there is no way to create a reverse DOM Range using Range.setStart/setEnd
   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.
   */

/**
   * Find a native DOM selection point from a Slate point.
   */

/**
   * Find the DOM node that implements DocumentOrShadowRoot for the editor.
   */

/**
   * Find the native DOM element from a Slate node.
   */

/**
   * Find the path of Slate node.
   */

/**
   * Focus the editor.
   */

/**
   * Get a list of ancestor paths for a given path.
   *
   * The paths are sorted from shallowest to deepest ancestor. However, if the
   * `reverse: true` option is passed, they are reversed.
   */

/**
   * Get a list of paths at every level down to a path. Note: this is the same
   * as `Path.ancestors`, but including the path itself.
   *
   * The paths are sorted from shallowest to deepest. However, if the `reverse:
   * true` option is passed, they are reversed.
   */

/**
   * Get a path relative to an ancestor.
   */

/**
   * Get a range of a location.
   */

/**
   * Get an entry for the common ancesetor node of two paths.
   */

/**
   * Get the ancestor above a location in the document.
   */

/**
   * Get the child of a node at a specific index.
   */

/**
   * Get the common ancestor path of two paths.
   */

/**
   * Get the concatenated text string of a node's content.
   *
   * Note that this will not include spaces or line breaks between block nodes.
   * It is not a user-facing string, but a string for performing offset-related
   * computations for a node.
   */

/**
   * Get the descendant node referred to by a specific path. If the path is an
   * empty array, it refers to the root node itself.
   */

/**
   * Get the end point of a location.
   */

/**
   * Get the end point of a range.
   */

/**
   * Get the first node at a location.
   */

/**
   * Get the first node entry in a root node from a path.
   */

/**
   * Get the fragment at a location.
   */

/**
   * Get the intersection of a range with another.
   */

/**
   * Get the last node at a location.
   */

/**
   * Get the last node entry in a root node from a path.
   */

/**
   * Get the leaf text node at a location.
   */

/**
   * Get the leaves for a text node given decorations.
   */

/**
   * Get the marks that would be added to text at the current selection.
   */

/**
   * Get the matching node in the branch of the document after a location.
   */

/**
   * Get the matching node in the branch of the document before a location.
   */

/**
   * Get the merge flag's current value.
   */

/**
   * Get the node at a location.
   */

/**
   * Get the node at a specific path, asserting that it's a descendant node.
   */

/**
   * Get the node at a specific path, asserting that it's an ancestor node.
   */

/**
   * Get the node at a specific path, ensuring it's a leaf text node.
   */

/**
   * Get the parent node of a location.
   */

/**
   * Get the parent of a node at a specific path.
   */

/**
   * Get the path of a location.
   */

/**
   * Get the point after a location.
   */

/**
   * Get the point before a location.
   */

/**
   * Get the saving flag's current value.
   */

/**
   * Get the set of currently tracked path refs of the editor.
   */

/**
   * Get the set of currently tracked point refs of the editor.
   */

/**
   * Get the set of currently tracked range refs of the editor.
   */

/**
   * Get the sliced fragment represented by a range inside a root node.
   */

/**
   * Get the start and end points of a location.
   */

/**
   * Get the start and end points of a range, in the order in which they appear
   * in the document.
   */

/**
   * Get the start or end point of a location.
   */

/**
   * Get the start point of a location.
   */

/**
   * Get the start point of a range.
   */

/**
   * Get the target range from a DOM `event`.
   */

/**
   * Get the text string content of a location.
   *
   * Note: by default the text of void nodes is considered to be an empty
   * string, regardless of content, unless you pass in true for the voids option
   */

/**
   * Given a path, get the path to the next sibling node.
   */

/**
   * Given a path, get the path to the previous sibling node.
   */

/**
   * Given a path, return a new path referring to the parent node above it.
   */

/**
   * Insert a block break at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert a fragment at a specific location in the editor.
   */

/**
   * Insert a fragment at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert a node at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert a soft break at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert a string of text in the Editor.
   */

/**
   * Insert data from a `DataTransfer` into the editor.
   */

/**
   * Insert fragment data from a `DataTransfer` into the editor.
   */

/**
   * Insert nodes at a specific location in the Editor.
   */

/**
   * Insert text at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */

/**
   * Insert text data from a `DataTransfer` into the editor.
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Invert an operation, returning a new operation that will exactly undo the
   * original when applied.
   */

/**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */

/**
   * Iterate over the children of a node at a specific path.
   */

/**
   * Iterate through all of the levels at a location.
   */

/**
   * Iterate through all of the nodes in the Editor.
   */

/**
   * Iterate through all of the point entries in a range.
   */

/**
   * Lift nodes at a specific location upwards in the document tree, splitting
   * their parent in two if necessary.
   */

/**
   * Manually set if the editor should currently be normalizing.
   *
   * Note: Using this incorrectly can leave the editor in an invalid state.
   *
   */

/**
   * Match a void node in the current branch of the editor.
   */

/**
   * Merge a node at a location with the previous node of the same depth,
   * removing any empty containing nodes after the merge if necessary.
   */

/**
   * Move the nodes at a location to a new location.
   */

/**
   * Move the selection's point forward or backward.
   */

/**
   * Normalize any dirty objects in the editor.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Redo to the previous saved state.
   */

/**
   * Remove a custom property from all of the leaf text nodes in the current
   * selection.
   *
   * If the selection is currently collapsed, the removal will be stored on
   * `editor.marks` and applied to the text inserted next.
   */

/**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */

/**
   * Remove the nodes at a specific location in the document.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Return a generator of all leaf text nodes in a root node.
   */

/**
   * Return a generator of all the ancestor nodes above a specific path.
   *
   * By default the order is top-down, from highest to lowest ancestor in
   * the tree, but you can pass the `reverse: true` option to go bottom-up.
   */

/**
   * Return a generator of all the descendant node entries inside a root node.
   */

/**
   * Return a generator of all the element nodes inside a root node. Each iteration
   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the
   * root node is an element it will be included in the iteration as well.
   */

/**
   * Return a generator of all the node entries of a root node. Each entry is
   * returned as a `[Node, Path]` tuple, with the path referring to the node's
   * position inside the root node.
   */

/**
   * Return a generator of the in a branch of the tree, from a specific path.
   *
   * By default the order is top-down, from highest to lowest node in the tree,
   * but you can pass the `reverse: true` option to go bottom-up.
   */

/**
   * Return all the positions in `at` range where a `Point` can be placed.
   *
   * By default, moves forward by individual offsets at a time, but
   * the `unit` option can be used to to move by character, word, line, or block.
   *
   * The `reverse` option can be used to change iteration direction.
   *
   * Note: By default void nodes are treated as a single point and iteration
   * will not happen inside their content unless you pass in true for the
   * `voids` option, then iteration will occur.
   */

/**
   * Return the host window of the current editor.
   */

/**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */

/**
   * Returns whether this operation can affect paths or not. Used as an
   * optimization when updating dirty paths during normalization
   *
   * NOTE: This *must* be kept in sync with the implementation of 'transform'
   * below
   */

/**
   * Set new properties on one of the selection's points.
   */

/**
   * Set new properties on the nodes at a location.
   */

/**
   * Set new properties on the selection.
   */

/**
   * Set the selection to a new value.
   */

/**
   * Sets data from the currently selected fragment on a `DataTransfer`.
   */

/**
   * Split the nodes at a specific location.
   */

/**
   * Subscribe to the cancel signal
   */

/**
   * The system is divided into two categories
   * 1. Management (mainly interactive)
   * 2. Product introduction (mainly display)
   */

/**
   * This is the generator driver
   * It's a recursive async/continuation function which calls itself
   * until the generator terminates or throws
   * @param {internal commands(TASK_CANCEL | TERMINATE) | any} arg - value, generator will be resumed with.
   * @param {boolean} isErr - the flag shows if effect finished with an error
   *
   * receives either (command | effect result, false) or (any thrown thing, true)
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Throws a `CanceledError` if cancellation has been requested.
   */

/**
   * Transform a path by an operation.
   */

/**
   * Transform a point by an operation.
   */

/**
   * Transform a range by an operation.
   */

/**
   * Transform the editor by an operation.
   */

/**
   * Transform the path ref's current value by an operation.
   */

/**
   * Transform the point ref's current value by an operation.
   */

/**
   * Transform the range ref's current value by an operation.
   */

/**
   * Undo to the previous saved state.
   */

/**
   * Unset properties on the nodes at a location.
   */

/**
   * Unset the selection.
   */

/**
   * Unsubscribe from the cancel signal
   */

/**
   * Unwrap the nodes at a location from a parent node, splitting the parent if
   * necessary to ensure that only the content in the range is unwrapped.
   */

/**
   * Utility function to handle redirects returned from an action or loader.
   * Normally, a redirect "replaces" the navigation that triggered it.  So, for
   * example:
   *
   *  - user is on /a
   *  - user clicks a link to /b
   *  - loader for /b redirects to /c
   *
   * In a non-JS app the browser would track the in-flight navigation to /b and
   * then replace it with /c when it encountered the redirect response.  In
   * the end it would only ever update the URL bar with /c.
   *
   * In client-side routing using pushState/replaceState, we aim to emulate
   * this behavior and we also do not update history until the end of the
   * navigation (including processed redirects).  This means that we never
   * actually touch history until we've processed redirects, so we just use
   * the history action from the original navigation (PUSH or REPLACE).
   */

/**
   * Wrap the nodes at a location in a new container node, splitting the edges
   * of the range first to ensure that only the content in the range is wrapped.
   */

/**
   * animation start position
   */

/**
   * btn的状态
   * 是否被hover、focus
   */

/**
   * context
   */

/**
   * dropdown的参数
   */

/**
   * end
   * 将监听的数据转化为静态变量
   */

/**
   * handle Over
   */

/**
   * title icon type
   */

/**
   * 下拉内容的状态
   * 是否被hover、focus
   */

/**
   * 下拉框的起点
   * @param {boolean} reverse 是否反转
   * @returns {[number,number]} [x,y]
   */

/**
   * 定位位置的入口
   */

/**
   * 将修改visible的方法暴露出去
   * 这样不仅可以做组件内的交互
   * 也可以让使用者自己做交互
   * 让两个交互合并起来都可以执行
   */

/**
   * 将动态监听的数据
   * 转化为静态的
   * end
   */

/**
   * 将动态监听的数据
   * 转化为静态的
   * start
   */

/**
   * 将监听的数据转化为静态变量
   * start
   */

/**
   * 展示状态
   * 0 => null
   * 1 => loading
   * 2 => 所有数据列表
   */

/**
   * 当show切换时触发的
   */

/**
   * 当visible变化时
   */

/**
   * 当鼠标在滚动容器上时
   * 1. 重新计算滚动条尺寸
   */

/**
   * 根据type 来定义 它们自己的边界
   * @param type
   * @returns
   */

/**
   * 每当show改变时 要执行
   *  前提 先要获取到子节点的宽高
   */

/**
   * 比较children element的变化
   */

/**
   * 监听 kite的root element的变化
   * 如果 top、left、width、height和之前不同 就得重新计算位置
   */

/**
   * 监听 局部的show和全局的show
   */

/**
   * 监听滚动
   * @param {React.UIEvent<HTMLDivElement>} e event
   */

/**
   * 计数器
   * show 用来 判断是否有过渡效果
   * removeOnHidden 用来判断 时候可以cache
   */

/**
   * 过渡状态
   *
   * 0 => 还未开始
   * 1 => 开始
   * 2 => 结束
   * 3 => 取消
   */

/**
   * 过滤出所有为Right的 li的属性
   * 倒叙
   */

/**
   * 这里做次数判断
   */

/**
   * 这里加入翻译文件
   */

/**
   * 遍历行
   */

/**
   Creates a new task descriptor for this generator.
   A task is the aggregation of it's mainTask and all it's forked tasks.
   **/

/**
   Schedule the put in case another saga is holding a lock.
   The put will be executed atomically. ie nested puts will execute after
   this put has terminated.
   **/

/**
   This may be called by a parent generator to trigger/propagate cancellation
   cancel all pending tasks (including the main task), then end the current task.
    Cancellation propagates down to the whole execution tree held by this Parent task
   It's also propagated to all joiners of this task and their execution tree/joiners
    Cancellation is noop for terminated/Cancelled tasks tasks
   **/

/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/

/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/

/**
  Puts the scheduler in a `released` state.
**/

/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/

/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/

/**
 *
 * @param children
 * @returns
 */

/**
 *
 * @param {Date | number | string} time
 * @returns {Date | null}
 */

/**
 *
 * @param {HTMLElement} el
 * @returns {timeout: number;propCount: number;}
 */

/**
 *
 * @param {number} h 0~360
 * @param {number} s 0~100
 * @param {number} l 0~100
 * @returns {[number,number,number]} rgb [0~255,0~255,0~255]
 */

/**
 *
 * @param {string } res
 * @returns {Date|null}
 */

/**
 *
 * @param {string} url
 * @param {width: number;height: number;x: number;y: number;} pixelCrop cur image data
 * @returns {Promise}
 */

/**
 *
 * @returns {Promise<number>}
 */

/**
 *
 */

/**
 * @deprecated
 *
 * **We recommend using the `configureStore` method
 * of the `@reduxjs/toolkit` package**, which replaces `createStore`.
 *
 * Redux Toolkit is our recommended approach for writing Redux logic today,
 * including store setup, reducers, data fetching, and more.
 *
 * **For more details, please read this Redux docs page:**
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * `configureStore` from Redux Toolkit is an improved version of `createStore` that
 * simplifies setup and helps avoid common bugs.
 *
 * You should not be using the `redux` core package by itself today, except for learning purposes.
 * The `createStore` method from the core `redux` package will not be removed, but we encourage
 * all users to migrate to using Redux Toolkit for all Redux code.
 *
 * If you want to use `createStore` without this visual deprecation warning, use
 * the `legacy_createStore` import instead:
 *
 * `import { legacy_createStore as createStore} from 'redux'`
 *
 */

/**
 * @deprecated This component is no longer maintained, please use the DropDownListV2
 */

/**
 * @file
 * @date 2020-09-04
 * @author Mark
 * @lastModify Mark 2020-09-04
 */

/**
 * @file
 * @date 2021-08-30
 * @author xuejie.he
 * @lastModify mingzhou.zhang 2022-05-14
 */

/**
 * @file
 * @date 2021-12-13
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-13
 */

/**
 * @file
 * @date 2022-05-27
 * @author mingzhou.zhang
 * @lastModify  2022-05-27
 */

/**
 * @file
 * @date 2022-06-15
 * @author
 * @lastModify  2022-06-15
 */

/**
 * @file
 * @date 2022-07-05
 * @author
 * @lastModify  2022-07-05
 */

/**
 * @file
 * @date 2022-08-24
 * @author
 * @lastModify  2022-08-24
 */

/**
 * @file
 * @date 2022-09-08
 * @author
 * @lastModify  2022-09-08
 */

/**
 * @file CheckGroup
 * @date 2022-01-17
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-17
 */

/**
 * @file CustomTable
 * @date 2022-03-30
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-30
 */

/**
 * @file FontSize
 * @date 2022-03-08
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-08
 */

/**
 * @file GoogleMap
 * @date 2021-03-10
 * @author Andy Jiang
 * @lastModify Andy Jiang 2021-03-10
 */

/**
 * @file Loading v2
 * @date 2022-04-18
 * @author mignzhou.zhang
 * @lastModify mignzhou.zhang 2022-04-18
 */

/**
 * @file MagneticEditor
 * @date 2022-02-28
 * @author xuejie.he
 * @lastModify xuejie.he 2022-02-28
 */

/**
 * @file Message components
 * @date 2021-06-03
 * @author xuejie.he
 * @lastModify xuejie.he 2021-06-03
 */

/**
 * @file NavigationBar
 * @date 2022-04-11
 * @author xuejie.he
 * @lastModify xuejie.he 2022-04-11
 */

/**
 * @file Preview display component
 * @date 2020-10-13
 * @author Andy Jiang
 * @lastModify Andy Jiang 2020-10-13
 */

/**
 * @file PreviewImage
 * @date 2022-06-20
 * @author xuejie.he
 * @lastModify xuejie.he 2022-06-20
 */

/**
 * @file Project
 * @date 2022-04-11
 * @author xuejie.he
 * @lastModify xuejie.he 2022-04-11
 */

/**
 * @file Project type context
 * @date 2022-09-27
 * @author Cunming Liu
 * @lastModify  2022-09-27
 */

/**
 * @file Temp
 * @date 2022-04-14
 * @author xuejie.he
 * @lastModify xuejie.he 2022-04-14
 */

/**
 * @file Temp
 * @date 2022-06-28
 * @author xuejie.he
 * @lastModify xuejie.he 2022-06-28
 */

/**
 * @file UnderConstruction
 * @date 2021-10-13
 * @author xuejie.he
 * @lastModify xuejie.he 2021-10-13
 */

/**
 * @file abc
 * @date 2021-12-14
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-14
 */

/**
 * @file abc
 * @date 2021-12-16
 * @author xuejie.he
 * @lastModify mingzhou.zhang 2022-4-25
 */

/**
 * @file abc
 * @date 2021-12-21
 * @author xuejie.he
 * @lastModify xuejie.he 2021-12-21
 */

/**
 * @file abc
 * @date 2022-03-08
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-08
 */

/**
 * @file auto Position
 * @date 2022-01-14
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-14
 */

/**
 * @file avatar crop
 * @date 2021-08-26
 * @author xuejie.he
 * @lastModify xuejie.he 2021-08-26
 */

/**
 * @file check context
 * @date 2022-01-17
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-17
 */

/**
 * @file color conversion
 * @date 2021-08-12
 * @author xuejie.he
 * @lastModify xuejie.he 2021-08-12
 */

/**
 * @file color slider
 * @date 2021-08-12
 * @author xuejie.he
 * @lastModify xuejie.he 2021-08-12
 */

/**
 * @file descendant 转化成Html
 * @date 2022-07-02
 * @author xuejie.he
 * @lastModify xuejie.he 2022-07-02
 */

/**
 * @file dropdown context
 * @date 2022-09-29
 * @author xuejie.he
 * @lastModify xuejie.he 2022-09-29
 */

/**
 * @file dropdown的hover或focus的事件
 * @date 2022-10-07
 * @author xuejie.he
 * @lastModify xuejie.he 2022-10-07
 */

/**
 * @file font icon
 * @date 2021-08-09
 * @author xuejie.he
 * @lastModify xuejie.he 2021-08-09
 */

/**
 * @file get Text length
 * @date 2022-03-11
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-11
 */

/**
 * @file get column props
 * @date 2022-03-23
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-23
 */

/**
 * @file index file of IconDropDownList component
 * @date 2020-09-04
 * @author Andy Jiang
 * @lastModify Andy Jiang 2020-11-26
 */

/**
 * @file leaf
 * @date 2022-03-03
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-03
 */

/**
 * @file login type
 * @date 2022-08-10
 * @author Cunming Liu
 * @lastModify  2022-08-10
 */

/**
 * @file main
 * @date 2022-01-10
 * @author xuejie.he
 * @lastModify xuejie.he 2022-01-10
 */

/**
 * @file main domain
 * @date 2022-08-10
 * @author Cunming Liu
 * @lastModify  2022-08-10
 */

/**
 * @file navigation style sheet
 * @date 2020-11-09
 * @author Andy
 * @lastModify Andy 2020-11-09
 */

/**
 * @file pagination component
 * @date 2021-07-21
 * @author xuejie.he
 * @lastModify xuejie.he 2021-07-21
 */

/**
 * @file request
 * @date 2022-08-10
 * @author Cunming Liu
 * @lastModify  2022-08-10
 */

/**
 * @file table component
 * @date 2021-08-23
 * @author xuejie.he
 * @lastModify xuejie.he 2021-08-23
 */

/**
 * @file tableContext
 * @date 2022-03-23
 * @author xuejie.he
 * @lastModify xuejie.he 2022-03-23
 */

/**
 * @file tag card component
 * @date 2020-10-26
 * @author Andy Jiang
 * @lastModify Andy Jiang 2020-10-26
 */

/**
 * @file 将字符串转化为slate可用的数据
 * @date 2022-07-07
 * @author xuejie.he
 * @lastModify xuejie.he 2022-07-07
 */

/**
 * @file: bind methods
 * @date: 2021-05-20 14:19
 * @author: xuejie.he
 * @lastModify: xuejie.he 2021-05-20 14:20
 */

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @param {window | Document | Element} el element
 * @param {EventParams[]} params eventParams
 */

/**
 * @private
 * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies
 */

/**
 * @private
 */

/**
 * @remix-run/router v1.0.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * A PathPattern is used to match on some portion of a URL pathname.
 */

/**
 * A React context for sharing the `readOnly` state of the editor.
 */

/**
 * A React context for sharing the editor selector context in a way to control rerenders
 */

/**
 * A Router instance manages all navigation and data loading/mutations
 */

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */

/**
 * A browser history stores the current location in regular URLs in a web
 * browser environment. This is the standard for most web apps and provides the
 * cleanest URLs the browser's address bar.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory
 */

/**
 * A hash history stores the current location in the fragment identifier portion
 * of the URL in a web browser environment.
 *
 * This is ideal for apps that do not control the server for some reason
 * (because the fragment identifier is never sent to the server), including some
 * shared hosting environments that do not provide fine-grained controls over
 * which pages are served at which URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A redirect response. Sets the status code and the `Location` header.
 * Defaults to "302 Found".
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A user-supplied object that describes a location. Used when providing
 * entries to `createMemoryHistory` via its `initialEntries` option.
 */

/**
 * A wrapper around the provider to handle `onChange` events, because the editor
 * is a mutable singleton so it won't ever register as "changed" otherwise.
 */

/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */

/**
 * Actions represent the type of change to a location value.
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Add alignment patterns bits to matrix
 *
 * Note: this function must be called after {@link setupTimingPattern}
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Add encoded data bits to matrix
 *
 * @param  {BitMatrix}  matrix Modules matrix
 * @param  {Uint8Array} data   Data codewords
 */

/**
 * Add finder patterns bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Add format info bits to matrix
 *
 * @param  {BitMatrix} matrix               Modules matrix
 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
 * @param  {Number}    maskPattern          Mask pattern reference value
 */

/**
 * Add timing pattern bits to matrix
 *
 * Note: this function must be called before {@link setupAlignmentPattern}
 *
 * @param  {BitMatrix} matrix Modules matrix
 */

/**
 * Add version info bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */

/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */

/**
 * Alphanumeric mode encodes data from a set of 45 characters,
 * i.e. 10 numeric digits (0 - 9),
 *      26 alphabetic characters (A - Z),
 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
 * Normally, two input characters are represented by 11 bits.
 *
 * @type {Object}
 */

/**
 * Applies xor operator at specified location
 * (used during masking process)
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 */

/**
 * Apply a mask pattern to a BitMatrix
 *
 * @param  {Number}    pattern Pattern reference number
 * @param  {BitMatrix} data    BitMatrix data
 */

/**
 * Array of characters available in alphanumeric mode
 *
 * As per QR Code specification, to each character
 * is assigned a value from 0 to 44 which in this case coincides
 * with the array index
 *
 * @type {Array}
 */

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
 */

/**
 * Build QR Code symbol
 *
 * @param  {String} data                 Input string
 * @param  {Number} version              QR Code version
 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
 * @param  {MaskPattern} maskPattern     Mask pattern
 * @return {Object}                      Object containing symbol data
 */

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */

/**
 * Builds a graph from a list of nodes.
 * All segments in each node group will be connected with all the segments of
 * the next group and so on.
 *
 * At each connection will be assigned a weight depending on the
 * segment's byte length.
 *
 * @param  {Array} nodes    Array of object with segments data
 * @param  {Number} version QR Code version
 * @return {Object}         Graph of all possible segments
 */

/**
 * Builds a list of segments from an array.
 * Array can contain Strings or Objects with segment's info.
 *
 * For each item which is a string, will be generated a segment with the given
 * string and the more appropriate encoding mode.
 *
 * For each item which is an object, will be generated a segment with the given
 * data and mode.
 * Objects must contain at least the property "data".
 * If property "mode" is not present, the more suitable mode will be used.
 *
 * @param  {Array} array Array of objects with segments data
 * @return {Array}       Array of Segments
 */

/**
 * Builds a segment from a specified data and mode.
 * If a mode is not specified, the more suitable will be used.
 *
 * @param  {String} data             Input data
 * @param  {Mode | String} modesHint Data mode
 * @return {Segment}                 Segment
 */

/**
 * Builds an optimized sequence of segments from a string,
 * which will produce the shortest possible bitstream.
 *
 * @param  {String} data    Input string
 * @param  {Number} version QR Code version
 * @return {Array}          Array of segments
 */

/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */

/**
 * Calculate proportion of dark modules in entire symbol
 *
 * Points: N4 * k
 *
 * k is the rating of the deviation of the proportion of dark modules
 * in the symbol from 50% in steps of 5%
 */

/**
 * Calculate the remainder of polynomials division
 *
 * @param  {Uint8Array} divident Polynomial
 * @param  {Uint8Array} divisor  Polynomial
 * @return {Uint8Array}          Remainder
 */

/**
 * Calculate the row/column coordinates of the center module of each alignment pattern
 * for the specified QR Code version.
 *
 * The alignment patterns are positioned symmetrically on either side of the diagonal
 * running from the top left corner of the symbol to the bottom right corner.
 *
 * Since positions are simmetrical only half of the coordinates are returned.
 * Each item of the array will represent in turn the x and y coordinate.
 * @see {@link getPositions}
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinate
 */

/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */

/**
 * Check if bit at specified location is reserved
 *
 * @param {Number}   row
 * @param {Number}   col
 * @return {Boolean}
 */

/**
 * Check if input param is a valid mode object
 *
 * @param   {Mode}    mode Mode object
 * @returns {Boolean} True if valid mode, false otherwise
 */

/**
 * Check if mask pattern value is valid
 *
 * @param  {Number}  mask    Mask pattern
 * @return {Boolean}         true if valid, false otherwise
 */

/**
 * Check if the given error is an ErrorResponse generated from a 4xx/5xx
 * Response throw from an action/loader
 */

/**
 * Check whether a text diff was applied in a way we can perform the pending action on /
 * recover the pending selection.
 */

/**
 * Check whether to merge an operation into the previous operation.
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */

/**
 * Children.
 */

/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */

/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */

/**
 * Compare.
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */

/**
 * Connects a React component to a Redux store.
 *
 * - Without arguments, just wraps the component, without changing the behavior / props
 *
 * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior
 * is to override ownProps (as stated in the docs), so what remains is everything that's
 * not a state or dispatch prop
 *
 * - When 3rd param is passed, we don't know if ownProps propagate and whether they
 * should be valid component props, because it depends on mergeProps implementation.
 * As such, it is the user's responsibility to extend ownProps interface from state or
 * dispatch props or both when applicable
 *
 * @param mapStateToProps A function that extracts values from state
 * @param mapDispatchToProps Setup for dispatching actions
 * @param mergeProps Optional callback to merge state and dispatch props together
 * @param options Options for configuring the connection
 *
 */

/**
 * Constants.
 */

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

/**
 * Create a message that appears above the visible window
 * @param {TopMessageProps}
 * @returns void
 */

/**
 * Create a message that appears below the visible window
 * @param {BottomMessageProps}
 * @returns void
 */

/**
 * Create a new Slate `Editor` object.
 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */

/**
 * Create a router and listen to history POP navigations
 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */

/**
 * Create encoded codewords from data input
 *
 * @param  {Number}   version              QR Code version
 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
 * @param  {ByteData} data                 Data input
 * @return {Uint8Array}                    Buffer containing encoded codewords
 */

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */

/**
 * Create selector context with editor updating on every editor change
 */

/**
 * Creates a Location object with a unique key from the given Path
 */

/**
 * Creates a Redux store that holds the state tree.
 *
 * **We recommend using `configureStore` from the
 * `@reduxjs/toolkit` package**, which replaces `createStore`:
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Creates a string URL path from the given pathname, search, and hash components.
 */

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */

/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */

/**
 * Data mask pattern reference
 * @type {Object}
 */

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/**
 * Editable.
 */

/**
 * Encode data with Bose-Chaudhuri-Hocquenghem
 *
 * @param  {Number} data Value to encode
 * @return {Number}      Encoded value
 */

/**
 * Encode input data with Reed-Solomon and return codewords with
 * relative error correction bits
 *
 * @param  {BitBuffer} bitBuffer            Data to encode
 * @param  {Number}    version              QR Code version
 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
 * @return {Uint8Array}                     Buffer containing encoded codewords
 */

/**
 * Encodes a chunk of data
 *
 * @param  {Uint8Array} data Buffer containing input data
 * @return {Uint8Array}      Buffer containing encoded data
 */

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */

/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */

/**
 * Export.
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */

/**
 * Extracts a series of segments with the appropriate
 * modes from a string
 *
 * @param  {String} dataStr Input string
 * @return {Array}          Array of object with segments data
 */

/**
 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
 * preceded or followed by light area 4 modules wide
 *
 * Points: N3 * number of pattern found
 */

/**
 * Find 2x2 blocks with the same color and assign a penalty value
 *
 * Points: N2 * (m - 1) * (n - 1)
 */

/**
 * For Node.js, simply re-export the core `util.deprecate` function.
 */

/**
 * For browser-based histories, we combine the state and key into an object
 */

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/

/**
 * Generate an irreducible generator polynomial of specified degree
 * (used by Reed-Solomon encoder)
 *
 * @param  {Number} degree Degree of the generator polynomial
 * @return {Uint8Array}    Buffer containing polynomial coefficients
 */

/**
 * Generates a list of all possible nodes combination which
 * will be used to build a segments graph.
 *
 * Nodes are divided by groups. Each group will contain a list of all the modes
 * in which is possible to encode the given text.
 *
 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
 * The group for '12345' will contain then 3 objects, one for each
 * possible encoding mode.
 *
 * Each node represents a possible segment.
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */

/**
 * Get a list of segments of the specified mode
 * from a string
 *
 * @param  {Mode}   mode Segment mode
 * @param  {String} str  String to process
 * @return {Array}       Array of object with segments data
 */

/**
 * Get mode object from its name
 *
 * @param   {String} string Mode name
 * @returns {Mode}          Mode object
 */

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

/**
 * Get the distance to the end of the first character in a string of text.
 */

/**
 * Get the slate range the text diff spans.
 */

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

/**
 * Given an existing StaticHandlerContext and an error thrown at render time,
 * provide an updated StaticHandlerContext suitable for a second SSR render
 */

/**
 * Hash history stores the location in window.location.hash. This makes it ideal
 * for situations where you don't want to send the location to the server for
 * some reason, either because you do cannot configure it or the URL space is
 * reserved for something else.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
 */

/**
 * Helper class to handle QR Code symbol modules
 *
 * @param {Number} size Symbol size
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */

/**
 * If the browser has an XMLHttpRequest object, use the XHR adapter, otherwise use the HTTP
 * adapter
 *
 * @returns {Function}
 */

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */

/**
 * In byte mode, data is encoded at 8 bits per character.
 *
 * @type {Object}
 */

/**
 * Infers the type of props that a connector will inject into a component.
 */

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */

/**
 * Initialize the encoder.
 * The input param should correspond to the number of error correction codewords.
 *
 * @param  {Number} degree
 */

/**
 * Is hotkey?
 */

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */

/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */

/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */

/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {void}
 */

/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

/**
 * Map of routeId -> data returned from a loader/action/error
 */

/**
 * Matches the given routes to a location and returns the match data.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/match-routes
 */

/**
 * Memory history stores the current location in memory. It is designed for use
 * in stateful non-browser environments like tests and React Native.
 */

/**
 * Merges adjacent segments which have the same mode
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */

/**
 * Mixed mode will contain a sequences of data in a combination of any of
 * the modes described above
 *
 * @type {Object}
 */

/**
 * Module dependencies.
 * @private
 */

/**
 * Module exports.
 * @public
 */

/**
 * Module exports.
 */

/**
 * Module variables.
 * @private
 */

/**
 * Multiplies two number inside Galois Field
 *
 * @param  {Number} x
 * @param  {Number} y
 * @return {Number}
 */

/**
 * Multiplies two polynomials inside Galois Field
 *
 * @param  {Uint8Array} p1 Polynomial
 * @param  {Uint8Array} p2 Polynomial
 * @return {Uint8Array}    Product of p1 and p2
 */

/**
 * Normalize a 'pending point' a.k.a a point based on the dom state before applying
 * the pending diffs. Since the pending diffs might have been inserted with different
 * marks we have to 'walk' the offset from the starting position to ensure we still
 * have a valid point inside the document
 */

/**
 * Normalize a 'pending selection' to ensure it's valid in the current document state.
 */

/**
 * Numeric mode encodes data from the decimal digit set (0 - 9)
 * (byte values 30HEX to 39HEX).
 * Normally, 3 data characters are represented by 10 bits.
 *
 * @type {Object}
 */

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */

/**
 * Parse.
 */

/**
 * Parses a string URL path into its separate pathname, search, and hash components.
 */

/**
 * Performs pattern matching on a URL pathname and returns information about
 * the match.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/match-path
 */

/**
 * Populate the extensions and types maps.
 * @private
 */

/**
 * Precompute the log and anti-log tables for faster computation later
 *
 * For each possible value in the galois field 2^8, we will pre-compute
 * the logarithm and anti-logarithm (exponential) of this value
 *
 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Puts the scheduler in a `suspended` state and executes a task immediately.
 */

/**
 * QR Code
 *
 * @param {String | Array} data                 Input data
 * @param {Object} options                      Optional configurations
 * @param {Number} options.version              QR Code version
 * @param {String} options.errorCorrectionLevel Error correction level
 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
 */

/**
 * QRCode for JavaScript
 *
 * modified by Ryan Day for nodejs support
 * Copyright (c) 2011 Ryan Day
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
*/

/**
 * React Router DOM v6.4.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * React Router v6.4.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */

/**
 * Remove redundant changes from the diff so that it spans the minimal possible range
 */

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */

/**
 * Return a string diff that is equivalent to applying b after a spanning the range of
 * both changes
 */

/**
 * Return mask value at given position
 *
 * @param  {Number} maskPattern Pattern reference value
 * @param  {Number} i           Row
 * @param  {Number} j           Column
 * @return {Boolean}            Mask value
 */

/**
 * Return mode name as string
 *
 * @param {Mode} mode Mode object
 * @returns {String}  Mode name
 */

/**
 * Returns UTF8 byte length
 *
 * @param  {String} str Input string
 * @return {Number}     Number of byte
 */

/**
 * Returns a path with params interpolated.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/generate-path
 */

/**
 * Returns a resolved path object relative to the given pathname.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/resolve-path
 */

/**
 * Returns an array containing the positions of each alignment pattern.
 * Each array's element represent the center point of the pattern as (x, y) coordinates
 *
 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
 * and filtering out the items that overlaps with finder pattern
 *
 * @example
 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
 * The alignment patterns, therefore, are to be centered on (row, column)
 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
 * and are not therefore used for alignment patterns.
 *
 * let pos = getPositions(7)
 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

/**
 * Returns an array containing the positions of each finder pattern.
 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

/**
 * Returns anti-log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */

/**
 * Returns bit value at specified location
 *
 * @param  {Number}  row
 * @param  {Number}  col
 * @return {Boolean}
 */

/**
 * Returns format information with relative error correction bits
 *
 * The format information is a 15-bit sequence containing 5 data bits,
 * with 10 error correction bits calculated using the (15, 5) BCH code.
 *
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Number} mask                 Mask pattern
 * @return {Number}                      Encoded format information bits
 */

/**
 * Returns how many bits are needed to encode a string of
 * specified length with the specified mode
 *
 * @param  {Number} length String length
 * @param  {Mode} mode     Segment mode
 * @return {Number}        Bit length
 */

/**
 * Returns how much data can be stored with the specified QR code version
 * and error correction level
 *
 * @param  {Number} version              QR Code version (1-40)
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Mode}   mode                 Data mode
 * @return {Number}                      Quantity of storable data
 */

/**
 * Returns log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */

/**
 * Returns mask pattern from a value.
 * If value is not valid, returns undefined
 *
 * @param  {Number|String} value        Mask pattern value
 * @return {Number}                     Valid mask pattern or undefined
 */

/**
 * Returns mode from a value.
 * If value is not a valid mode, returns defaultValue
 *
 * @param  {Mode|String} value        Encoding mode
 * @param  {Mode}        defaultValue Fallback value
 * @return {Mode}                     Encoding mode
 */

/**
 * Returns the QR Code size for the specified version
 *
 * @param  {Number} version QR Code version
 * @return {Number}         size of QR code
 */

/**
 * Returns the best mask pattern for data
 *
 * @param  {BitMatrix} data
 * @return {Number} Mask pattern reference number
 */

/**
 * Returns the host window of a DOM node
 */

/**
 * Returns the minimum version needed to contain the amount of data
 *
 * @param  {Segment} data                    Segment of data
 * @param  {Number} [errorCorrectionLevel=H] Error correction level
 * @param  {Mode} mode                       Data mode
 * @return {Number}                          QR Code version
 */

/**
 * Returns the most efficient mode to store the specified data
 *
 * @param  {String} dataStr Input data string
 * @return {Mode}           Best mode
 */

/**
 * Returns the number of bits needed to store the data length
 * according to QR Code specifications.
 *
 * @param  {Mode}   mode    Data mode
 * @param  {Number} version QR Code version
 * @return {Number}         Number of bits
 */

/**
 * Returns the number of error correction block that the QR Code should contain
 * for the specified version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction blocks
 */

/**
 * Returns the number of error correction codewords to use for the specified
 * version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction codewords
 */

/**
 * Returns the total number of codewords used to store data and EC information.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Data length in bits
 */

/**
 * Returns version information with relative error correction bits
 *
 * The version information is included in QR Code symbols of version 7 or larger.
 * It consists of an 18-bit sequence containing 6 data bits,
 * with 12 error correction bits calculated using the (18, 6) Golay code.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Encoded version info bits
 */

/**
 * Returns version number from a value.
 * If value is not a valid version, returns defaultValue
 *
 * @param  {Number|String} value        QR Code version
 * @param  {Number}        defaultValue Fallback value
 * @return {Number}                     QR Code version number
 */

/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */

/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */

/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */

/**
 * Set bit value at specified location
 * If reserved flag is set, this bit will be ignored during masking process
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 * @param {Boolean} reserved
 */

/**
 * Splits a string in various segments with the modes which
 * best represent their content.
 * The produced segments are far from being optimized.
 * The output of this function is only used to estimate a QR Code version
 * which may contain the data.
 *
 * @param  {string} data Input string
 * @return {Array}       Array of segments
 */

/**
 * Successful result from a loader or action
 */

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */

/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

/**
 * The Kanji mode efficiently encodes Kanji characters in accordance with
 * the Shift JIS system based on JIS X 0208.
 * The Shift JIS values are shifted from the JIS X 0208 values.
 * JIS X 0208 gives details of the shift coded representation.
 * Each two-byte character value is compacted to a 13-bit binary codeword.
 *
 * @type {Object}
 */

/**
 * The `withHistory` plugin keeps track of the operation history of a Slate
 * editor as operations are applied to it, using undo and redo stacks.
 *
 * If you are using TypeScript, you must extend Slate's CustomTypes to use
 * this plugin.
 *
 * See https://docs.slatejs.org/concepts/11-typescript to learn how.
 */

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The pathname, search, and hash values of a URL.
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * This file automatically generated from `pre-publish.js`.
 * Do not manually edit.
 */

/**
 * This is a shortcut for creating `application/json` responses. Converts `data`
 * to JSON and sets the `Content-Type` header.
 */

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */

/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * Utils.
 */

/**
 * Weighted penalty scores for the undesirable features
 * @type {Object}
 */

/**
 * `withReact` adds React and DOM specific behaviors to the editor.
 *
 * If you are using TypeScript, you must extend Slate's CustomTypes to use
 * this plugin.
 *
 * See https://docs.slatejs.org/concepts/11-typescript to learn how.
 */

/**
 * element节点转化
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */

/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */

/**
 * transition-clock  用来获取过渡之前的数据
 * @param initStyle 初始的样式
 * @param extraStyle 通过计算 后 又想要加的额外样式
 * @param onTransitionStart 过渡开始
 * @param onTransitionEnd 过渡结束
 * @param onTransitionCancel 过渡取消
 * @param onTransitionCancel 过渡取消
 * @param root 要变化的节点
 * @returns
 */

/**
 * use redux style selectors to prevent rerendering on every keystroke.
 * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.
 *
 * Example:
 * ```
 *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));
 * ```
 */

/**
 * 将文件后缀转换为 对应的icon图标
 * @param type 文件类型
 * @returns icon配置对象 包含颜色 类别
 */

/**
 * 排除属性方法
 * @param obj 操作对象
 * @param fields 排除属性 数组
 * @returns 返回一个 已排除后 的对象
 */

/**
 * 水平线文字
 * @param chart 图标实例
 * @param h 水平线值
 * @param textOption 文字配置项
 */

/**
 * 自动定位位置
 */

/**
 * 获取富文本的文字总数
 * @param { Descendant[]} res value
 * @returns {number}
 */

/**
 * 获得一个临时使用的伪唯一值
 * @returns 唯一值
 */

/**
 * 选择属性方法
 * @param obj 操作对象
 * @param fields 选择属性 数组
 * @returns 返回一个 只包含选择属性 的对象
 */

/**
 Used to track a parent task and its forks
 In the fork model, forked tasks are attached by default to their parent
 We model this using the concept of Parent task && main Task
 main task is the main flow of the current Generator, the parent tasks is the
 aggregation of the main tasks + all its forked tasks.
 Thus the whole model represents an execution tree with multiple branches (vs the
 linear execution tree in sequential (non parallel) programming)

 A parent tasks has the following semantics
 - It completes if all its forks either complete or all cancelled
 - If it's cancelled, all forks are cancelled as well
 - It aborts if any uncaught error bubbles up from forks
 - If it completes, the return value is the one returned by the main task
 **/

/**
* Find adjacent modules in row/column with the same color
* and assign a penalty value.
*
* Points: N1 + i
* i is the amount by which the number of adjacent modules of the same color exceeds 5
*/

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** A function that accepts a potential "extra argument" value to be injected later,
 * and returns an instance of the thunk middleware that uses that value
 */

/** Bootstring parameters */

/** Built-in value references. */

/** Cached calculation results */

/** Creates a main task to track the main flow */

/** Define the public API */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Detect free variables */

/** Error message constants. */

/** Error messages */

/** Highest positive signed 32-bit float value */

/** Regular expressions */

/** This section will include all the interface for this tsx file */

/** This section will include all the necessary dependence for this tsx file */

/** Used as references for various `Number` constants. */

/** Used for built-in method references. */

/** Used to match a single whitespace character. */

/** Used to match leading whitespace. */

/** `Object#toString` result references. */

/** `inputLength` will hold the number of code points in `input`. */

/***
   * 记录上一次的show的状态
   */

/***** 这里做是否有过渡动画判断结束 *********/

/************* This section will include this component HOOK function *************/

/************* This section will include this component general function *************/

/************* This section will include this component parameter *************/

/******************************************************************************
 * Created 2008-08-19.
 *
 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
 *
 * Copyright (C) 2008
 *   Wyatt Baldwin <self@wyattbaldwin.com>
 *   All rights reserved
 *
 * Licensed under the MIT license.
 *
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *****************************************************************************/

/***/

/**/

/**Banishment start*/

/*--------------------------------------------------------------------------*/

/*.*/

/*/*/

/*</replacement>*/

/*<replacement>*/

/*eslint func-names:0*/

/*eslint no-param-reassign:0*/

/*eslint-disable no-console*/

/*global window, global*/

//

//                     : data.btnRect.left + data.btnRect.width + data.scrollX;

//                     : data.btnRect.left + data.scrollX;

//                     : data.btnRect.top + data.btnRect.height + data.scrollY;

//                     : data.btnRect.top + data.scrollY;

//                     ? data.btnRect.left + data.btnRect.width + data.scrollX

//                     ? data.btnRect.left + data.scrollX

//                     ? data.btnRect.top + data.btnRect.height + data.scrollY

//                     ? data.btnRect.top + data.scrollY

//                 x = reverse

//                 y = reverse

//             break;

//             if (data.placement.endsWith("t")) {

//             if (data.placement.startsWith("l")) {

//             x = data.btnRect.left + data.scrollX;

//             y = data.btnRect.top + data.scrollY;

//             {children}

//             }

//             } else {

//         </a>

//         <a href={(element as unknown as Record<"url", string>).url} {...attributes}>

//         attributes: true,

//         case "horizontal":

//         case "vertical":

//         console.log(" ******************** ");

//         console.log("className", node.getAttribute("class"));

//         console.log("style", node.getAttribute("style"));

//         fill: color,

//         height: height,

//         ob.disconnect();

//         return;

//         width: width,

//     );

//     1         // No comma at the end!

//     `blockText='${blockText}' - `+

//     `leafTextRemaining=${leafTextRemaining} - `+

//     `not exhausted before new block node`, path)

//     `not exhausted before new leaf text node`, path)

//     child = <code>{child}</code>;

//     className={className ?? ""}

//     const data = staticData as StaticProps;

//     const fn = () => {

//     const node = root;

//     const ob = new MutationObserver(fn);

//     content === messageContextData.bottom?.content &&

//     if (!data) {

//     if (!node) {

//     let x = 0;

//     let y = 0;

//     mountEl === messageContextData.bottom?.mount

//     ob.observe(node, {

//     postMessage(messageContextData.bottom.key);

//     return (

//     return () => {

//     return <blockquote {...attributes}>{children}</blockquote>;

//     return <h1 {...attributes}>{children}</h1>;

//     return <h2 {...attributes}>{children}</h2>;

//     return <h3 {...attributes}>{children}</h3>;

//     return <h4 {...attributes}>{children}</h4>;

//     return <h5 {...attributes}>{children}</h5>;

//     return <h6 {...attributes}>{children}</h6>;

//     return <li {...attributes}>{children}</li>;

//     return <ol {...attributes}>{children}</ol>;

//     return <pre {...attributes}>{children}</pre>;

//     return <ul {...attributes}>{children}</ul>;

//     return [x, y];

//     return;

//     style={{

//     switch (data.direction) {

//     }

//     });

//     };

//     }}

//    another readable later.

//    buffer.fill(buffer[, offset[, end]])

//    buffer.fill(number[, offset[, end]])

//    buffer.fill(string[, offset[, end]][, encoding])

//    care of it.

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//   'data' event.

//   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])

//   [

//   ]

//   and causing memory leaks

//   blockRange = Editor.range(editor, ...Editor.edges(editor, path))

//   blockRange = Range.intersection(range, blockRange) // intersect

//   blockText = Editor.string(editor, blockRange, { voids })

//   call read here would abort the flow and there's no other mechanism for

//   called push() with new data. In this case we skip performing more

//   case where the the stream has called the implementation defined _read()

//   console.assert(blockText === '',

//   console.assert(blockText === '', "blockText wasn't exhausted")

//   console.assert(leafTextRemaining <= 0,

//   console.assert(leafTextRemaining <= 0, "leafText wasn't exhausted")

//   continuing the flow if the stream consumer has just subscribed to the

//   is available. If highWaterMark is 0 and we are not in the flowing mode

//   is responsible for filling the buffer with enough data if such data

//   let router = createRouter(init).initialize();

//   location, indicating we redirected from the action (avoids false

//   method, but they are processing the call asynchronously and have _not_

//   on a prior submission)

//   positives for loading/submissionRedirect when actionData returned

//   read()s. The execution ends in this method again after the _read() ends

//   the loop below is responsible for ensuring read() is called. Failing to

//   up calling push() with more data.

//   we should _not_ attempt to buffer any extra data. We'll get more data

//   when the stream consumer calls read() instead.

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

//  * 测试逻辑

//  */

//  0..25 map to ASCII a..z or A..Z

//  It seems that the dispatch argument

//  and a state object in some others (ex: whenMapStateToPropsIsMissing)

//  could be a dispatch function in some cases (ex: whenMapDispatchToPropsIsMissing)

//  isRemove = true;

// "Software"), to deal in the Software without restriction, including

// "break on all exceptions" in your console,

// "name": intentionally not styling

// "the promise rejected with null" or "the promise fulfilled with undefined".

// '\x2D'

// 'abxxcd' will be treated as 'ab')

// 'chunk' is an input chunk.

// 'error'

// 'path' module extracted from Node.js v8.11.1 (only the posix part)

// 'readable' etc.

// (2017/10/17)

// (2020/08/08)

// (e.g. a Uint8Array and a Uint16Array with the same memory content

// (e.g. to handle extra CRLFs on .NET servers)

// (e.g. when clicking on contentEditable:false element)

// (meaning that the selection ends before the element)

// (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush

// ) {

// * Note:

// *below* the call to _read.  The reason is that in certain

// +   2

// - Can pass any other state in newState

// - However, we may have gotten new wrapper props after that

// - Location is a required param

// - Navigation will always be set to IDLE_NAVIGATION

// - No data in the buffer, and the stream is in flowing mode. In this mode

// - Not enough data buffered (state.length < state.highWaterMark). The loop

// - The current navigation was a submission

// - The location we've finished loading is different from the submission

// - The stream has ended (state.ended).

// - There is already a pending 'read' operation (state.reading). This is a

// - This render may have been triggered by a Redux store update that produced new child props

// - We have committed actionData in the store

// - We're past the submitting state and into the loading state

// - buffer - a Buffer to search

// - byteOffset - an index into `buffer`; will be clamped to an int32

// - dir - true for indexOf, false for lastIndexOf

// - encoding - an optional encoding, relevant is val is a string

// - val - a string, Buffer, or number

// - we extract this to a separate function to avoid closing over values

// - we need to fall back to `useEffect` in SSR to avoid annoying warnings

// ----------------

// -0 === +0

// ... we need to consider *all* matching keys, not just the first we find.

// ...and explore the edges that connect u to those nodes, updating

// .end() fully uncorks

// /**

// /user-preferences since `-` counts as a word boundary.

// 1. Figure out what the state of things will be after we do

// 1. It is not flowing, as the flow mechanism will take

// 12hour

// 1kb of data being output.  In this case, you could write a very small

// 2 leads in a row

// 2-byte UTF-8

// 2. If that resulting state will trigger a _read, then call _read.

// 2. It is not ended.

// 26 Feb 16:19:34

// 26..35 map to ASCII 0..9

// 3-byte UTF-8

// 3. Actually pull the requested chunks out of the buffer and return.

// 3. It is below the highWaterMark, so we can schedule

// 4-byte UTF-8

// </div>

// <div

// =============

// ===============

// ================

// => Check whether `dest` is still a piping destination.

// >

// @check why add CRLF? does this account for custom/multiple CRLFs?

// @see {@link Mode.getCharCountIndicator}.

// @see {@link initTables}

// @see {@link mul}

// @ts-expect-error

// @ts-expect-error an unorthodox delete D:

// @ts-ignore

// @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype

// @ts-ignore The `beforeinput` event isn't recognized.

// @ts-ignore The `getTargetRanges` property isn't recognized.

// A bit simpler than readable streams.

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// A linked list is used to store data chunks instead of an array because the

// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION

// API

// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

// Abort any in-progress navigations and start a new one. Unset any ongoing

// Abort in-flight fetcher loads

// Accept native ES6 promises and promises that are implemented in a similar

// Access the stack to generate the error message including the error code

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Add a hacky cast to get the right output type

// Add a terminator.

// Add all cached information to the result before adding other things

// Add break after content.

// Add content to the buffer.

// Add data codewords

// Add default alpha value

// Add function modules

// Add headers to the request

// Add pad bytes if the string is still shorter than the total number of required bits.

// Add position indicator for the first mismatch in case it is a

// Add responseType to request if needed

// Add temporary dummy bits for format info just to set them as reserved.

// Add the actual line to the result and cache the expected diverging

// Add the actual line to the result.

// Add the children before adding this route to the array so we traverse the

// Add the content to a <div> so that we can get its inner HTML.

// Add the error code to the name to include it in the stack trace.

// Add the expected line to the cache.

// Add the footer and return the Buffer object.

// Add withCredentials to request if needed

// Add xsrf header

// Adding the second element, need to change to array.

// Advance `leafText` by the current `distance`.

// After adding the terminator, if the number of bits in the string is not a multiple of 8,

// All identical values are equivalent, as determined by ===.

// All non-basic code points < n have been handled already. Find the next

// All of the following functions must throw an AssertionError

// All the actual chunk generation logic needs to be

// Allocate matrix buffer

// Allow for axios('example/url'[, config]) a la fetch API

// Allow for deprecating things in the process of starting up.

// Allow for unix-like usage: A.pipe(B).pipe(C)

// Allow injecting another batching function later

// Allow positioning relative to the editable element.

// Allow the keys array to be GC'ed.

// Allow words to break if they are too long.

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Also valid opts.auth, opts.mode

// Also, if we have no data yet, we can stand some more bytes.

// Always load if this is a net-new route or we don't yet have data

// And in Firefox, the selection isn't properly collapsed.

// Any reducers that existed in both the new and old rootReducer

// Apped EC codewords

// Apply mask pattern

// Are we oob?

// Arguments:

// Array is sparse.

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass

// As workaround one can calculate file size manually

// Assert compares only enumerable properties (with a few exceptions).

// Assert does not detect proxies currently.

// At least give some kind of context to the user

// At this point the path should be resolved to a full absolute path, but

// At this time, the Slate document may be arbitrarily different,

// Attach a native DOM event handler for `beforeinput` events, because React's

// Attach a native DOM event handler for `selectionchange`, because React's

// Attach the factory function so users can create a customized version

// Attempt to read more data if we should.

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

// Avoid `split(regex)` for IE8 compatibility. See #17.

// Avoid failures from read-only properties

// Axios

// Back slashes before the query string get converted to forward slashes

// Backwards-compat with node 0.10.x

// Backwards-compat with node 0.4.x

// Based on http://stackoverflow.com/a/22747272/680742, the browser with

// Based on that, if `memoizeOptions` _is_ an array, we assume it's a full

// Based on the previous check, one of these must be true

// Because `null` is a special error value in callbacks which means "no error

// Because of that, the useSyncExternalStore compat shim is needed.

// Block element node - set `blockText` to its text content.

// Both close and finish should trigger unpipe, but only once.

// Buffer#write(string)

// Buffer.compare returns true, so val1.length === val2.length. If they both

// Build optimized segments

// But allow more writes to happen in this tick.

// But that's a pretty big refactor to the current test suite so going to

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// By convention, when a data property is converted to an accessor

// By default EventEmitters will print a warning if more than 10 listeners are

// By default, all submissions are REPLACE navigations, but if the

// By default, use the selection as the target location. But if there is

// By directly retrieving the value we prevent another b.has(key) check in

// CHECK FUNCTIONS

// COMPAT: Android IMEs might remove the zero width space while composing,

// COMPAT: Artificially add a line-break to the end on the placeholder element

// COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.

// COMPAT: Browsers will collapse trailing new lines at the end of blocks,

// COMPAT: Certain browsers don't handle the selection updates

// COMPAT: Certain browsers don't support the `beforeinput` event, so we

// COMPAT: Certain browsers don't support the `beforeinput` event, so we'd

// COMPAT: Edge has a bug where Range.prototype.toString() will

// COMPAT: For the deleting forward/backward input types we don't want

// COMPAT: Having the `data-` attributes on these leaf elements ensures that

// COMPAT: If a void node is selected, or a zero-width text node

// COMPAT: If someone is clicking from one Slate editor into another,

// COMPAT: If the current `activeElement` is still the previous

// COMPAT: If the editor has nested editable elements, the focus

// COMPAT: If the end node is a void node, we need to move the end of the

// COMPAT: If the selection is expanded, even if the command seems like

// COMPAT: If the start node is a void node, we need to attach the encoded

// COMPAT: If the text is empty, it's because it's on the edge of an inline

// COMPAT: If this is the last text node in an empty block, render a zero-

// COMPAT: If we are writing inside a placeholder, the ime inserts the text inside

// COMPAT: If we don't explicity set the dom point to be on the actual

// COMPAT: In Chrome and Safari, if we don't add the `white-space` style

// COMPAT: In Chrome, `beforeinput` events for compositions

// COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)

// COMPAT: In Firefox, it's not enough to create a range, you also need

// COMPAT: In Firefox, reading `target.nodeType` will throw an error if

// COMPAT: In iOS, some of these hotkeys are handled in the

// COMPAT: In read-only editors the leaf is not rendered.

// COMPAT: React doesn't batch `setState` hook calls, which means that the

// COMPAT: Render text inside void nodes with a zero-width space.

// COMPAT: Safari doesn't always remove the selection even if the content-

// COMPAT: SelectionChange event is fired after the action is performed, so we

// COMPAT: Since we prevent the default behavior on

// COMPAT: Swiftkey closes the keyboard when typing inside a empty node

// COMPAT: Swiftkey has a weird bug where the target range of the 2nd word

// COMPAT: The composition end event isn't fired reliably in all browsers,

// COMPAT: The event should be ignored if the focus is moving from

// COMPAT: The event should be ignored if the focus is moving to a

// COMPAT: The event should be ignored if the focus is returning

// COMPAT: The selectionChange event is fired after the action is performed,

// COMPAT: There's a bug in chrome that always returns `true` for

// COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,

// COMPAT: While composing at the start of a text node, some keyboards put

// COMPAT: While setting the selection in an animation frame visually correctly sets the selection,

// COMPAT: use composition change events as a hint to where we should insert

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toArray.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Buttons/Button/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Buttons/Button/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/dateContext.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Calendar/DatePicker/Unit/typeToDate.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/CheckGroup/Unit/context.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Choose/CheckGroup/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Accordion/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Alert/Unit/content.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/Avatar/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/ColorPicker/Unit/ColorSlider/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/ColorPicker/Unit/colorConversion.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataDisplay/QuestionIcon/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/Unit/Cropper/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/AvatarCrop/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/DataInput/SearchInput/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Dropdown/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Hooks/useHover.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/Unit/autoPosition.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/Unit/eventListener.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Dropdown/Kite/Unit/kiteRoot.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/Unit/BottomMessage/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/Unit/RightMessage/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Feedback/Message/index.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/GoogleMap/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Col/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Row/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Sidebar/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Grid/Wrapper/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Icon/Unit/customFontIcon.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Login/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/Mobile/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/Nav/Unit/ProjectManager/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/Unit/Management/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/Unit/Product/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/NavigationBar/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Navigation/User/Unit/Mobile/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/OIDCLogin/Api/interceptor.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/OIDCLogin/Api/mainDomain.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/OIDCLogin/Unit/login/loginType.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/OIDCLogin/Unit/projectContext/index.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Preview/FullImage/Unit/main.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Preview/FullImage/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Preview/PreviewImage/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/CustomTable/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Table/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Title/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Unit/getColumnProps.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Table/Unit/tableContext.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/FontSize/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/LockedEditor/styles.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/MagneticEditor/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Tool/style.module.scss

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Unit/getLength.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Unit/leaf.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Unit/stringtoHtml.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/TextEdit/Unit/toHtml.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Transition/Transition/Unit/forceReflow.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Charts/Unit/Plugins/arbitraryLine.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Charts/Unit/Plugins/scrollBar.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Charts/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Contacts/Unit/ContactList/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/Criteria/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/LoadingV2/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/Components/Zmz/TimePickerV2/Unit/TimeWrap/index.tsx

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/Calendar/index.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/DataInput/avatarCrop.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/DataInput/upload.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/Feedback/message.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/Header/headerV2.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/background.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/blockBtn.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/color.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/copy.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/fontSize.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/dr_front_componentlibrary/DefaultData/TextEditor/image.ts

// CONCATENATED MODULE: ./node_modules/@datareachable/webpack/assets/js/index.js

// CONCATENATED MODULE: ./node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js

// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/index.js

// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/xhr.js

// CONCATENATED MODULE: ./node_modules/axios/lib/axios.js

// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CancelToken.js

// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CanceledError.js

// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/isCancel.js

// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosError.js

// CONCATENATED MODULE: ./node_modules/axios/lib/core/InterceptorManager.js

// CONCATENATED MODULE: ./node_modules/axios/lib/core/buildFullPath.js

// CONCATENATED MODULE: ./node_modules/axios/lib/core/dispatchRequest.js

// CONCATENATED MODULE: ./node_modules/axios/lib/core/mergeConfig.js

// CONCATENATED MODULE: ./node_modules/axios/lib/core/settle.js

// CONCATENATED MODULE: ./node_modules/axios/lib/core/transformData.js

// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/index.js

// CONCATENATED MODULE: ./node_modules/axios/lib/env/classes/FormData.js

// CONCATENATED MODULE: ./node_modules/axios/lib/env/data.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/bind.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/buildURL.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/combineURLs.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/cookies.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/formDataToJSON.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAxiosError.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isURLSameOrigin.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseHeaders.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseProtocol.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/speedometer.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/spread.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toFormData.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toURLEncodedForm.js

// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/validator.js

// CONCATENATED MODULE: ./node_modules/axios/lib/utils.js

// CONCATENATED MODULE: ./node_modules/dr_position/src/codegrid.js

// CONCATENATED MODULE: ./node_modules/dr_position/src/tiles/index.js

// CONCATENATED MODULE: ./node_modules/i18next/dist/esm/i18next.js

// CONCATENATED MODULE: ./node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.esm.js

// CPS (ie node style functions) can define their own cancellation logic

// CUSTOM ERRORS

// Cache hit

// Cache implementation based on Erik Rasmussen's `lru-memoize`:

// Cache of json file across zoom levels

// Cache the length

// Cache the xhr value

// Cached entry not at top of cache, move it to the top

// Calculate EC codewords for this data block

// Calculate EC for this data block

// Calculate how far into the text node the `nearestNode` is, so that we

// Calculate penalty

// Calculate required number of bits

// Call `cb(err)` when you are done with this chunk.  If you pass

// Call `push(newChunk)` to pass along transformed output

// Call action if we received an action submission

// Call all applicable loaders for the given matches, handling redirects,

// Call all navigation loaders and revalidating fetcher loaders in parallel,

// Call loaders

// Call the action for the fetcher

// Call the action for the matched fetcher.submit(), and then handle redirects,

// Call the action matched by the leaf route for this navigation and handle

// Call the loader for this fetcher route match

// Call the matched loader for fetcher.load(), handling redirects, errors, etc.

// Callback after initialization

// Can typed array instances can be augmented?

// Can't do anything with these without the Remix side of things, so just

// Can't set responseType on really old browsers

// Cancel all pending deferred on 404s since we don't keep any routes

// Cancel pending deferreds for no-longer-matched routes or routes we're

// Cancel pending route-level deferreds and mark cancelled routes for

// Cancel the deferred - but do not remove from activeDeferreds here -

// Capture values for checking if and when this component unmounts

// Cause a re-render to restore the dom state if we encounter tracked mutations without

// Chameleons count as word characters as long as they're in a word, so

// Character (grapheme cluster) boundaries are determined according to

// Character count indicator + mode indicator bits

// Characters that are never ever allowed in a hostname.

// Cheap key test

// Check for listener leak

// Check for sparse arrays and general fast path

// Check if the specified version can contain the data

// Check if we're actually ready to finish, but don't emit yet

// Check more closely if val1 and val2 are equal.

// Check that value is an object with an inspect function on it

// Check that we didn't get one last unshift.

// Checking for a Stream.Duplex instance is faster here instead of inside

// Checks at most 3 bytes at the end of a Buffer in order to detect an

// Checks that a user-supplied chunk is valid, especially for the particular

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a

// Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100

// Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405

// Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'

// Class for a single utf-grid

// Clean up _after_ loaders have completed.  Don't clean up if we short

// Clean up a router and it's side effects

// Clean up now that the action/loaders have completed.  Don't clean up if

// Clean up request

// Cleanup function for history

// Clear any formats applied to the cursor if the selection changes.

// Clear buffered mutations to ensure we don't undo them twice

// Clear pending calls to getCode

// Clicked the same link, resubmitted a GET form

// Coerce to Number.

// Commit pending error if we're short circuiting

// Common case.

// Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.

// Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION

// Completion callback passed to the appropriate effect runner

// Composition change types occur while a user is composing text and can't be

// Configuration. Should match generator settings

// Consumes a specified amount of bytes from the buffered data.

// Consumes a specified amount of bytes or characters from the buffered data.

// Consumes a specified amount of characters from the buffered data.

// Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)

// Convert from short to long form (fff -> ffffff)

// Convert result to a 13-bit binary string

// Convert the input in UCS-2 to Unicode

// Copy 0 bytes; we're done

// Copy axios.prototype to instance

// Copy chrome, IE, opera backslash-handling behavior.

// Copy context to instance

// Copy properties from require('buffer')

// Copy static methods from Buffer

// Copyright (c) 2009 Thomas Robinson <280north.com>

// Copyright Joyent, Inc. and other Node contributors.

// Cost of s to u plus the cost of u to v across e--this is *a*

// Costs of shortest paths from s to all nodes encountered.

// Costs of shortest paths from s to all nodes encountered; differs from

// Create a Submission on non-GET navigations

// Create a controller/Request for this navigation

// Create a fake selection so that we can add a Base64-encoded copy of the

// Create an href to represent a "server" URL without the hash

// Create error message including the error code in the name.

// Create final data

// Create lookup table for `toString('hex')`

// Create placeholder objects to create a nice output.

// Create the default instance to be exported

// Create the form content. Add Line breaks to the end of data.

// Crypto is kind of old and crusty.  Historically, its default string

// Currently in sync with Node.js lib/assert.js

// Currently in sync with Node.js lib/internal/assert/assertion_error.js

// Currently in sync with Node.js lib/internal/errors.js

// Currently in sync with Node.js lib/internal/util/comparisons.js

// Currently in sync with Node.js lib/internal/util/types.js

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// DCE check should happen before ReactDOM bundle executes so that

// DOM if we don't prevent them, so we have to.

// Declare so we can access from createMemoryLocation

// Decode a generalized variable-length integer into `delta`,

// Decode in chunks to avoid "call stack size exceeded".

// Deduce if we're in a loading/actionReload state:

// Default to a dummy "batch" implementation that just runs the callback

// Default value

// Deferred isn't supported or fetcher loads, await everything and treat it

// Define some constant arrays just to avoid re-creating these

// Deselect the editor if the dom selection is not selectable in readonly mode

// Determine the new offset inside the text node.

// Determine whether the node should have block or inline children.

// Determine which set of options we're using. Prefer options passed directly,

// DevTools can report bad minification during injection.

// DevTools shouldn't crash React, no matter what.

// Discard mutations caused during render phase. This works due to react calling

// Distinguish between actual "data" props that were passed to the wrapper component,

// Divide the buffer into the required number of blocks

// Do not cache `Buffer.isEncoding` when checking encoding names as some

// Do not compare the stack as it might differ even though the error itself

// Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.

// Doesn't matter what the args are here.

// Don't bother if no value provided

// Don't do anything if add isn't an object

// Don't emit readable right away in sync mode, because this can trigger

// Don't get confused, there are 3 "internal" streams for each keyval pair

// Don't have enough

// Don't process redirects in the router during SSR document requests.

// Don't raise the hwm > 1GB

// Don't restore on submission navigations

// Don't run stale listeners.

// Don't use 'blue' not visible on cmd.exe

// Don't use UCS-2

// Duplex streams are both readable and writable, but share

// E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

// ES6 symbol

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/core/dist/io-40341e1a.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.esm.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/is/dist/redux-saga-is.cjs.js

// EXTERNAL MODULE: ./node_modules/@redux-saga/symbols/dist/redux-saga-symbols.cjs.js

// EXTERNAL MODULE: ./node_modules/axios/index.js + 40 modules

// EXTERNAL MODULE: ./node_modules/chart.js/dist/chart.js

// EXTERNAL MODULE: ./node_modules/form-data/lib/form_data.js

// EXTERNAL MODULE: ./node_modules/i18next/dist/esm/i18next.js + 15 modules

// EXTERNAL MODULE: ./node_modules/qrcode/lib/browser.js

// EXTERNAL MODULE: ./node_modules/react-dom/client.js

// EXTERNAL MODULE: ./node_modules/react-dom/index.js

// EXTERNAL MODULE: ./node_modules/react-i18next/dist/commonjs/index.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js

// EXTERNAL MODULE: ./node_modules/slate-history/dist/index.js

// EXTERNAL MODULE: ./node_modules/slate-react/dist/index.js

// EXTERNAL MODULE: ./node_modules/slate/dist/index.js

// Each leading .. segment means "go up one route" instead of "go up one

// Effect callback, extracted: assign the latest props values to refs for later usage

// Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,

// Either this is the first call, activity has stopped and we're at the

// Else resolve a range from the caret position where the drop occured.

// Emits a 'removeListener' event if and only if the listener was removed.

// Empty buffer means no match

// Empty strings should be treated the same as / paths

// Enable batched updates in our subscriptions for use

// Ending with a TASK_CANCEL will propagate the Cancellation to all joiners

// Ensure range considered is capped to `range`, in the

// Ensure readable listeners eventually get something

// Ensure selection is inside the mark placeholder

// Ensure that all the modifiers are set to false unless the hotkey has them.

// Ensure that block and inline nodes have at least one text child.

// Ensure that inline nodes are surrounded by text nodes.

// Ensure that text content is rendered on server-side rendering

// Ensure that the nodes are equivalent, and figure out what the position

// Ensure the current pending diffs originating from changes before the addMark

// Ensure the pathname has a trailing slash if the original "to" had one

// Ensure we don't restore the pending user (dom) selection

// Ensure we insert text with the marks the user was actually seeing

// Equivalent to this, but presumably more performant:

// Error status codes always override success status codes, but if all

// ErrorResponse, we still need this for error cases _prior_ the

// Escape control characters but not \n and \t to keep the line breaks and

// Estimate best version that can contain raw splitted segments

// EventEmitters, we do not listen for `error` events here.

// EventTarget does not have `error` event semantics like Node

// Every interruption triggers a revalidation

// Every written chunk gets output as-is.

// Everything else in the universe uses 'utf8', though.

// Expose Axios class to allow class inheritance

// Expose AxiosError class

// Expose Cancel & CancelToken

// Expose a strict only variant of assert

// Expose all/spread

// Expose isAxiosError

// Extend the buffer to fill the data capacity of the symbol corresponding to

// Extension does not match, so our result is the entire path

// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

// Factory for creating new instances

// Fail in case no promise is returned.

// Fake the 'close' event, but only once 'end' fires

// Fall through

// Fast case, write everything using _writev()

// Fast path to detect missing string, symbol, undefined and null

// Fast path to detect missing string, symbol, undefined and null values.

// Fast path: If `val` fits into a single byte, use that numeric value.

// Fatal error conditions

// Figure out the right navigation we want to use for data loading

// Fill in loaderData/errors from our loaders

// Filter all frames existing in err.stack.

// Filter out all routes below any caught error as they aren't going to

// Filter out the util module, it's inspect function is special

// Finally, search either indexOf (if dir is true) or lastIndexOf

// Find any returned redirect errors, starting from the lowest match

// Find best mask pattern

// Find the first occurrence of the frame.

// Find the last text node inside the anchor.

// Find the nearest error boundary, looking upwards from the leaf route (or the

// Find the range where the drop happened

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,

// Finish the basic string - if it is not empty - with a delimiter

// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly

// First chunk is a perfect match.

// First coord is always 6

// First parameter (optional): URL path to the tiles directory

// First, make 100% sure that any "autoEscape" chars get

// Fix it when node fixes it.

// Flatten headers

// Flatten submission onto URLSearchParams for GET submissions

// Flush native operations, as native events will have propogated

// For IE11 support

// For SSR single-route requests, we want to hand Responses back directly

// For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop

// For Thai script, deleting N character(s) backward should delete

// For UTF-16LE we do not explicitly append special replacement characters if we

// For UTF-8, a replacement character is added when ending on a partial

// For all remaining Object pairs, including Array, objects and Maps,

// For browsers use XHR adapter

// For cases like 'first argument'

// For characters with Shift JIS values from 0x8140 to 0x9FFC:

// For characters with Shift JIS values from 0xE040 to 0xEBBF

// For each leaf, we need to isolate its content, which means filtering

// For example: from='/'; to='/foo'

// For example: from='/foo'; to='/'

// For example: from='/foo/bar'; to='/foo/bar/baz'

// For example: from='/foo/bar/baz'; to='/foo/bar'

// For node use HTTP adapter

// For now when you opt-in to autoDestroy we allow

// For some reason typeof null is "object", so special case here.

// For strict comparison, objects should have

// For void nodes, the element with the offset key will be a cousin, not an

// Force an array if not already something iterable

// Force coercion to uint32. This will also coerce falsey/NaN values to 0.

// Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate

// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS

// GB11

// GB12 and GB13

// GB6

// GB7

// GB8

// GB9

// GB9a

// GB9b

// Generate the relative path based on the path difference between `to`

// Get json tile path

// Get nodes adjacent to u...

// Get non-dir info

// Get the cost of the edge running from u to v.

// Get the highest nodes that are completely inside the range, as well as

// Get the min version that can contain data

// Get the next highest power of 2 to prevent increasing hwm excessively in

// Go looking.

// Guard instanceof against arrow functions as they don't have a prototype.

// HACK: better way?

// HELPER FUNCTIONS

// HTTP basic authentication

// Handle any TrackedPromise._error values encountered while unwrapping

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle cancellation

// Handle invocations in a tight loop.

// Handle low level network errors

// Handle primitives properly.

// Handle progress if needed

// Handle string cases:

// Handle the basic code points

// Handle the basic code points: let `basic` be the number of input code

// Handle the case that we don't have data for a re-used route, potentially

// Handle timeout

// Having a long line as error is better than wrapping the line for

// Help gc

// Helper:

// Here's how this works:

// However, even in such a pathological case, only a single written chunk

// However, if we're not ended, or reading, and the length < hwm,

// However, some cases require setting options to different

// IDNA Support: Returns a punycoded representation of "domain".

// IE 8 does not throw here

// IE 8 has a broken defineProperty

// IE 8 has a broken gOPD

// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')

// IE does not have builtin `{ once: true }` support so we

// IE doesn't make error fields non-enumerable

// IE needs attribute set twice to normalize properties

// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

// If "actual" and "expected" fit on a single line and they are not strictly

// If --no-deprecation is set, then it is a no-op.

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If XDomainRequest is available (ie only, where xhr might not work

// If _read pushed data synchronously, then `reading` will be false,

// If `leafText` has caught up with `blockText` (distance=0),

// If `leafText` is exhausted, break to get a new leaf node

// If a pathname is explicitly provided in `to`, it should be relative to the

// If any loaders returned a redirect Response, start a new REPLACE navigation

// If bytes.length is odd, the last 8 bits must be ignored (same as node.js)

// If coefficients number in remainder are less than genPoly degree,

// If estimated version is undefined, try with the highest version

// If fetch is supported, then arraybuffer will be supported too. Skip calling

// If fetch is supported, then overrideMimeType will be supported too. Skip calling

// If has modified constructor

// If has modified prototype

// If history informs us of a POP navigation, start the navigation but do not update

// If it's a block node with inline children, add the proper `dir` attribute

// If it's a void node, wrap the children in extra void-specific elements.

// If it's an element node, its offset refers to the index of its children

// If it's an obj, this is a no-op.

// If no version is found, data cannot be stored

// If not specified, use min version as default

// If obj.hasOwnProperty has been overridden, then calling

// If our path is non-empty and contains anything beyond an initial slash,

// If setEncoding(null), decoder.encoding equals utf8

// If starting a drag on a void node, make sure it is selected

// If streaming is a high priority but binary compatibility and

// If streaming is more important than preserving the 'content-type' header

// If the 'end' option is not supplied, dest.end() will be called when

// If the DOM selection is in the editor and the editor selection is already correct, we're done.

// If the DOM selection is properly unset, we're done.

// If the bit string is fewer than four bits shorter, add only the number of 0s that

// If the bit string is more than four bits shorter than the required number of bits,

// If the bit string is shorter than the total number of required bits,

// If the character length of "actual" and "expected" together is less than

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the drop target is inside a void node, move it into either the

// If the editable child found is in front of input offset, we instead seek to its end

// If the expected line has a trailing comma but is otherwise identical,

// If the insert point is at the edge of an inline node, move it outside

// If the last diverging line is exactly one line above or if it is the

// If the last diverging line is more than one line above and the

// If the loader threw a redirect Response, start a new REPLACE navigation

// If the move does not happen within a single parent it is possible

// If the move happens completely within a single parent the path and

// If the node doesn't exist in the tree, it does not need to be normalized.

// If the node has children, traverse until we have a leaf node. Leaf nodes

// If the node isn't already the next sibling of the previous node, move

// If the number of input data characters is not a multiple of two,

// If the number of input digits is not an exact multiple of three,

// If the old and new path are the same, it's a no-op.

// If the range encompasses the entire leaf, add the range.

// If the range expanded and match the leaf, or starts after, or ends before it, continue.

// If the range is collapsed in a non-empty node and 'split' is true, there's nothing to

// If the range is collapsed, make sure to use the same affinity to

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If the result func is actually an _object_, assume it's our options object

// If the specified value doesn't exist in the second set its an not null

// If the start or end points are inside an inline void, nudge them out.

// If the status is CANCELLED, then we do not need to change it here

// If the target is a path, the default height-skipping and position

// If the target node that we're merging with is empty, remove it instead

// If the use of XHR should be preferred. Not typically needed.

// If the user unpiped during `dest.write()`, it is possible

// If the user uses them, then switch into old mode.

// If the writable side ended, then we're ok.

// If there are more ".." segments than parent routes, resolve relative to

// If there is an @ in the hostname, then non-host chars *are* allowed

// If there is no 'error' event listener then throw.

// If there was going to be an empty ancestor of the node that was merged,

// If there's a match and it's lower than the last, update the hit.

// If this "action" is really a function, call it and return the result.

// If this is an uninterrupted revalidation, we remain in our current idle

// If this is our first dot, mark it as the start of our extension

// If this route had a pending deferred cancelled it must be revalidated

// If two routes are siblings, we should try to match the earlier sibling

// If we are currently in a navigation loading state and this fetcher is

// If we didn't consume the pending action error (i.e., all loaders

// If we do not match a user-provided-route, fall back to the root

// If we do not reverse the order and call it from top to the bottom, it will remove all blocks

// If we don't know, then assume that we are waiting for one.

// If we got back result.errors, that means the loader/action threw

// If we have a pending action error, we report it at the highest-route

// If we have a pendingError, it means the user attempted a GET submission

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we have nothing in the buffer, then we want to know

// If we haven't visited v yet OR if the current known cost from s to

// If we reached a path separator that was not part of a set of path

// If we return false, then we need a drain event, so set that flag.

// If we tried to read() past the EOF, then emit end on the next tick.

// If we're allowed to go downward and we haven't descended yet, do.

// If we're asking for more than the current hwm, then raise the hwm.

// If we're at the root and we can't go down, we're done.

// If we're currently in an idle state, start a new navigation for the current

// If we're currently submitting an action, we don't need to start a new

// If we're going backward...

// If we're going forward...

// If we're inside a void node, force the offset to 0, otherwise the zero

// If we're not subscribed to the store, nothing to do here

// If we've arrived at a leaf text node that is not lower than the last

// Ignore the first characters.

// Ignore, dom and state might be out of sync

// Implement an async ._write(chunk, encoding, cb), and it'll handle all

// Implemented as a Fluent API for ease of:

// In Firefox 4-22, defining length on an array throws an exception.

// In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.

// In a transform stream, the written data is placed in a buffer.  When

// In addition to the above conditions to keep reading data, the following

// In case "actual" is an object, it should not be reference equal.

// In case both values are objects explicitly mark them as not reference equal

// In case of duplex streams we need a way to detect

// In case the objects are equal but the operator requires unequal, show

// In email addresses, only the domain name should be punycoded. Leave

// In highest mode any node lower than the last hit is not a match.

// In lowest mode we emit the last hit, once it's guaranteed lowest.

// In that case, throw the error from here so it doesn't get lost.

// In the Shift JIS system, Kanji characters are represented by a two byte combination.

// In the nodes remaining in graph that have a known cost from s,

// In true node style we process the callback on `nextTick` with all the

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// Initialize the router, all side effects should be kicked off from here.

// Initialize the state

// Inline element nodes are ignored as they don't themselves

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Input data characters are divided into groups of two characters

// Insert `n` at position `i` of the output

// Inspect getters as we also check them when comparing entries.

// Inspected object to big (Show ~20 rows max)

// Instead, throw the Response and let the server handle it with an HTTP

// Interleave the data and error correction codewords from each block

// Invalid character

// Invalid ranges are not set to a default, so can range check early.

// Invoke the leading edge.

// It is also done this way as a slight performance increase instead of using a

// It is an ugly unfortunate mess of history.

// It only converts parts of the domain name that

// It seems a linked list but it is not

// It should not recurse.

// It's possible that we caught an error due to a bad mapState function, but the

// Iterate over array values

// Iterate over current buffer to convert already stored Buffers:

// Iterate over object keys

// JIS X 0208 gives details of the shift coded representation.

// Keep a reference to the dragged range before updating selection

// Keep the root "" segment so the pathname starts at /

// Keep track of some state for the event handler logic.

// Kick off initial data load if needed.  Use Pop to avoid modifying history

// L  M  Q  H

// LIFO order

// Last coord is always (size - 7)

// Lastly, append the rest of the destination (`to`) path that comes after

// Later on, put the first path part into the host field.

// Lazy loaded

// Length is the combined lengths of all the buffers in the list.

// Listen for ready state to emulate onloadend

// Listen on the native `beforeinput` event to get real "Level 2" events. This

// Listen on the native `selectionchange` event to be able to update any time

// Long-press events (hold a + press 4 = ä) to choose a special character otherwise

// Look up the keys of the object.

// Look upwards from the matched route for the closest ancestor

// Loose equal entries exist only if the string is possible to convert to

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// Main decoding loop: start just after the last delimiter if any basic code

// Main encoding loop:

// Make Array say that they are Array

// Make RegExps say that they are RegExps

// Make dates with properties first say the date

// Make error with message first say the error

// Make functions say that they are functions

// Make sure attach is non-empty, since empty nodes will not get copied.

// Make sure data can be encoded

// Make sure our error handler is attached before userland ones.

// Make sure the DOM selection state is in sync.

// Make sure the linked list only shows the minimal necessary information.

// Make sure we actually have a stack trace!

// Manage grids of one zoom level

// Manually shove something into the read() buffer.

// Mark that a method should not be used.

// Mark the current line as the last diverging one.

// Matches logic in React's `shared/ExecutionEnvironment` file

// Merge adjacent text nodes that are empty or match.

// Microsoft

// Mozilla

// Multiply most significant byte of result by 0xC0

// Must force callback to be called on nextTick, so that we don't

// N code point(s) instead of an entire grapheme cluster.

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// NOTE: These type checking functions intentionally don't use `instanceof`

// Necessary for IPv6 addresses

// Necessary for streaming in Firefox, since xhr.response is ONLY defined

// No entry found in cache, return sentinel

// No error code for this since it is a Warning

// No formData to flatten for GET submission

// No need to send through errors since we short circuit above

// No need to verify that "this.length <= MAX_UINT32" since it's a read-only

// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

// Node converts strings with length < 2 to ''

// Node strips out invalid characters like \n and \t from the string, base64-js does not

// Node takes equal signs as end of the Base64 encoding

// Node's code seems to be doing this and not & 0x7F..

// Node.js LazyTransform implementation, which has a non-trivial getter for

// Normalize byteOffset

// Normalize byteOffset: negative offsets start from the end of the buffer

// Normalize navigation options by converting formMethod=GET formData objects to

// Normalize the path

// Normalize val

// Normally, the page is loaded from http or https, so not specifying a protocol

// Not all browsers support upload events

// Not used

// Note that any invalid chars are also handled, but these

// Note that this may be asynchronous, or synchronous.  Yes, it is

// Note: 0 is a valid value, means "don't call _read preemptively ever"

// Note: 0 is a valid value, means that we always return false if

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:

// Note: Checking for the objects first improves the performance for object

// Note: No need to updateState here since the TrackedPromise on

// Note: The comments on the `throw` lines are intentional, they show

// Note: This should match the format exported by useMatches, so if you change

// Note: `onDragEnd` is only called when `onDrop` is not called

// Note: cannot use `length < K_MAX_LENGTH` here because that fails when

// Note: getLengthSync DOESN'T calculate streams length

// Note: statusCode + headers are unused here since queryRoute will

// Note: this accounts for both named and indexed properties on Arrays.

// Note: this doesn't actually make an http request.

// Note: we do not have to touch activeDeferreds here since we race them

// Notes: Type tags are historical [[Class]] properties that can be set by

// Nothing left to abort!

// Now that all that's done, we can finally try to actually render the child component.

// Now we have a portion which is definitely the auth.

// O(n log n) complexity we have to copy these values in a new set first.

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// OR the last index of `val` in `buffer` at offset <= `byteOffset`.

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// Obviously not all Emitters should be limited to 10. This function allows

// Omit new properties from the old properties list

// Omit properties that have been removed from the new properties list

// Once we find our first (highest) error, we set the status code and

// Only allow block nodes in the top-level children and parent blocks

// Only extra expected lines exist

// Only flow one buffer at a time

// Only insertText operations use the native functionality, for now.

// Only inspect one level.

// Only invoke if we have `lastArgs` which means `func` has been

// Only keep new frames.

// Only pass in null as object!

// Only print a single input.

// Only remove lines in case it makes sense to collapse those.

// Only use native character insertion for single characters a-z or space for now.

// Only when the target is void, call `preventDefault` to signal

// Opt in to capturing and reporting scroll positions during navigations,

// Optimization: double the size of the anti-log table so that we don't need to mod 255 to

// Optimize the case of one listener. Don't need the extra array object.

// Originally from narwhal.js (http://narwhaljs.org)

// Otherwise people can pipe Writable streams, which is just wrong.

// Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,

// Otherwise the DOM selection is out of sync, so update it.

// Otherwise we need to split the leaf, at the start, end, or both,

// Otherwise we risk emitting data in the flow()

// Otherwise we're going upward...

// Otherwise, if we're currently in a loading state, just start a new

// Otherwise, it doesn't really make sense to rank non-siblings by index,

// Otherwise, pass the action down the middleware chain as usual

// Our types know better, but runtime JS may not!

// Overflow

// PERF: Exit early if the operation is guaranteed not to have an effect.

// PERF: If the offset isn't `0` we know it's not the start.

// PERF: ensure the offsets are equal first since they are cheaper to check.

// PERF: exit early if we can guarantee that the range isn't hanging.

// PERF: in this case the move operation is a no-op anyways.

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)

// Perform initial hydration scroll restoration, since we miss the boat on

// Permission is hereby granted, free of charge, to any person obtaining a

// Permission is hereby granted, free of charge, to any person obtaining a copy

// Pick navigation matches that are net-new or qualify for revalidation

// Pick off the right state value to return

// Please convert your array into string

// Please use getLength(callback) to get proper length

// Pluck off n bytes from an array of buffers.

// Point references location after the diff

// Point references location inside the diff => transform the point based on the location

// Populate the extensions/types maps

// Ported from https://github.com/mafintosh/end-of-stream with

// Ported from https://github.com/mafintosh/pump with

// Possibly expensive deep test:

// Potentially expand to single character deletes, as well.

// Predecessor map for each node that has been encountered.

// Prefer a root layout route if present, otherwise shim in a route object

// Prefix data with character count indicator.

// Prepare data buffer

// Prepare the response

// Preserve adjacent whitespace and new lines.

// Prevent the default outline styles.

// Prevent the error stack from being visible by duplicating the error

// Primitive types cannot have properties

// Process and commit output from loaders

// Process any non-redirect errors thrown

// Process fetcher non-redirect errors

// Process loader results into state.loaderData/state.errors

// Process redirects

// Process results from our revalidating fetchers

// Proof that upon completion, we've exahusted both leaf and block text:

// Proof that we always exhaust text nodes before encountering a new one:

// Provide a hook for user-specified inspect functions.

// Provide aliases for supported request methods

// Public API

// Public API to check if length of added values is known

// Public function for retrieving country codes

// Pull data from the store after first render in case the store has

// Pull that off.

// Pure assertion tests whether a value is truthy, as determined

// Put all revalidating fetchers into the loading state, except for the

// Put the fetcher back into an idle state

// Put this after the other two cases because it simplifies the booleans

// Put this fetcher into it's loading state

// Put this fetcher into it's submitting state

// Put us in a submitting state

// RFC 2396: characters not allowed for various reasons.

// RFC 3490 separators

// Race Auto cancellation

// RawAxiosHeaders whose duplicates are ignored by node

// Re-assign `events` because a newListener handler could have caused the

// React currently throws a warning when using useLayoutEffect on the server.

// React v16.11 and below

// React v16.12 and above

// Readable class this is attached to

// Real errors are hidden from us by the browser

// Reducer initial state creation for our update reducer

// Redux doesn't guarantee unsubscriptions happen until next dispatch.

// Reference: RFC 3986, RFC 1808, RFC 2396

// References:

// Register rejection listeners to avoid uncaught promise rejections on

// Remove Content-Type if data is undefined

// Remove all ending lines that match (this optimizes the output for

// Remove any zero-width space spans from the cloned DOM so that they don't

// Remove diff only after we have applied it to account for it when transforming

// Remove the matching element to make sure we do not check that again.

// Remove this instance if we were aborted or if promises have settled

// Render text content immediately if it's the first-time render

// Replace format info bits with correct values

// Represent delta as a generalized variable-length integer

// Reset `leafText` counters for new text node.

// Reset any `maxWait` timer.

// Reset on each call to make sure we handle dynamically set environment

// Reset stateful navigation vars

// Reset the name to the actual name.

// Reset the name.

// Resolve a Slate range from the DOM range.

// Resolves . and .. elements in a path with directory names

// Restart the timer.

// Restore the actual user section if nothing manually set it.

// Rethrow the error if it exists to avoid swallowing it

// Return a rejected promise if `promiseFn` throws synchronously.

// Return an augmented `Uint8Array` instance

// Return early if start > this.length. Done here to prevent potential uint32

// Return location verbatim on non-submission navigations

// Return max number of storable codewords

// Return not function with Error if BigInt not supported

// Return the distance in offsets for a step of size `unit` on given string.

// Return the node and offset.

// Returns a modified function which warns once by default.

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a

// Returns only complete characters in a Buffer

// Revalidate all current loaders.  If a navigation is in progress or if this

// Review our test case against browsers more comprehensively.

// Routes without a path shouldn't ever match by themselves unless they are

// Routing is relative to the current pathname if explicitly requested.

// Sadly it is not possible to detect corresponding values properly in case the

// Sadly this is not cacheable as some libraries bundle their own

// Safari 5.0 bug

// Save references to the new child props.  Note that we track the "child props from store update"

// Save the current scroll position every time we start a new navigation,

// Search for a byte value [0-255]

// Search in nextzoomGrids

// Search in zoomGrids

// Search params affect all loaders

// Second parameter (optional): worldGrid object (parsed JSON)

// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using

// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring

// See: https://code.google.com/p/chromium/issues/detail?id=25916

// See: https://en.wikipedia.org/wiki/Base64#URL_applications

// See: https://github.com/beatgammit/base64-js/issues/42

// See: https://github.com/feross/buffer/issues/154

// See: https://github.com/feross/buffer/issues/166

// See: https://github.com/feross/buffer/issues/219

// See: https://github.com/joyent/node/issues/1707

// Selection was manually set, don't restore the user selection after the change.

// Send the request

// Send through the formData serialization error if we have one so we can

// Service workers don't have XHR

// Set a `data-slate-fragment` attribute on a non-empty node, so it shows up

// Set config.method

// Set the request timeout in MS

// Set up an AbortController + Promise we can race against to exit early

// Sets and maps don't have their entries accessible via normal object

// Setting status to CANCELLED does not necessarily mean that the task/iterators are stopped

// Short circuit if it's only a hash change

// Short circuit if we have no loaders to run

// Short circuit with a 404 if we match nothing

// Short circuit with a 404 on the root error boundary if we match nothing

// Should .destroy() be called after 'end' (and potentially 'finish')

// Should .destroy() be called after 'finish' (and potentially 'end')

// Should close be emitted on destroy. Defaults to true.

// Should never get here, deferred data should be awaited for fetchers

// Should never get here, redirects should get processed above, but we

// Simplified versions from Node, changed for Buffer-only usage

// Simplifying assumption: it's unlikely that the first options arg of the provided memoizer

// Since JS doesn't have multiple prototypal inheritance, this class

// Since fetcher GET submissions only run a single loader (as opposed to

// Since lowest is always emitting one behind, catch up at the end.

// Since tags can be altered, they only serve fast failures

// Since we'll be applying operations while iterating, keep track of an

// Skip empty entries

// Skip if position is occupied by finder patterns

// Skip native if there are marks, as

// Slow case, write chunks one-by-one

// So the node can contain selection but the text is not visible.

// So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert

// So, if this is awaiting a drain, then we just call it now.

// So, the steps are:

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before

// Some async length retrievers are present

// Some type of object without properties can be shortcutted.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Special case for a simple path URL

// Special case to handle the `+` key since we use it as a separator.

// Special case: looking for empty string/buffer always fails

// Special handle errors to make sure the name and the message are compared

// Specifically not if we're in a web worker, or react-native.

// Split the string at the previously found distance and use the

// Standard

// Standard browser envs have full support of the APIs needed to test

// Start a navigation to the given action/location.  Can optionally provide a

// Start the data load for current matches, or the next location if we're

// Start the timer for the trailing edge.

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere

// Store off the match so we can call it's shouldRevalidate on subsequent

// Store off the pending error - we use it to determine which loaders

// Strict equal with identical objects that are not identical by reference.

// StringDecoder provides an interface for efficiently splitting a series of

// Subscribe to state updates for the router

// Subtract 0x8140 from Shift JIS value

// Subtract 0xC140 from Shift JIS value

// Successfully walked `distance` offsets through `leafText`

// Supply a getter just to skip dealing with ESM bindings

// Support decoding URL-safe base64 strings, as Node.js does.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

// TODO Can this get pulled out so that we can subscribe directly to the store if we don't need ownProps?

// TODO Is unshift slow?

// TODO This is hacky and not how `uSES` is meant to be used

// TODO This is incredibly hacky. We've already processed the store update and calculated new child props,

// TODO We're currently calling getState ourselves here, rather than letting `uSES` do it

// TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing

// TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.

// TODO(BridgeAR): Improve the output by showing `null` and similar.

// TODO(BridgeAR): Write a test for these two error cases

// TODO(BridgeAR): `breakLength` should be limited as soon as soon as we

// TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.

// TODO: Accept env to always show the full error.

// TODO: Add more comments

// TODO: Can this as be avoided?

// TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -

// TODO: Looks like there is bug in Node fs.createReadStream

// TODO: This could be cleaned up.  push/replace should probably just take

// TODO: defer error events consistently everywhere, not just the cb

// TODO: should this even be in this module?

// TODO: thenables are checked up until they have the correct methods,

// TODO: use content-type or other module

// TODO: use media-typer

// Take note if the _read call is sync or async (ie, if the read call

// Taken from here and modified for better browser support

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method

// Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js

// Target add/remove is tracked. Track the mutation if we track the parent mutation.

// That we got here means that the readable side wants more data.

// The (right-most) trimmed path component is exactly '..'

// The AssertionError is defined in internal/error.

// The QR code specification says to use byte-wise modulo 100011101 arithmetic.

// The Transform stream has all the aspects of the readable and writable

// The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to

// The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.

// The above copyright notice and this permission notice shall be included

// The above copyright notice and this permission notice shall be included in

// The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it

// The character count indicator is a string of bits that represents the

// The character count indicator must be placed after the mode indicator

// The character value of the first character is multiplied by 45

// The character value of the second digit is added to the product

// The conditions for reading more data are (one of):

// The custom event handler may return a boolean to specify whether the event

// The equality assertion tests shallow, coercive equality with ==.

// The equivalence assertion tests a deep equality relation.

// The error correction codewords are the remainder after dividing the data codewords

// The input data string is divided into groups of three digits,

// The maximum size for an array is 2 ** 32 -1.

// The ms-stream case handles end separately in reader.onload()

// The nextTick is necessary to prevent the 'request' module from causing an infinite loop

// The non-equality assertion tests for whether two objects are not

// The non-equivalence assertion tests for any deep inequality.

// The only event fired soon enough for us to allow hiding the placeholder

// The pair must have equivalent values for every corresponding key.

// The pair must have the same number of owned properties.

// The primary entry point assumes we're working with standard ReactDOM/RN, but

// The request errored out and we didn't get a response, this will be

// The search location is from the start of the document to the path of

// The selector returned by selectorFactory will memoize its results,

// The status here may be RUNNING or CANCELLED

// The stream needs another readable event if

// The sum is then stored as 11-bit binary number

// The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,

// The thunk middleware looks for any functions that were passed to `store.dispatch`.

// The util.inspect default values could be changed. This makes sure the

// The whole point behind this internal module is to allow Node.js to no

// The xhr request to example.com may violate some restrictive CSP configurations,

// There are no core normalizations for text nodes.

// There are some unspecified tags in the wild too (e.g. typed array tags).

// There's no need to abort on redirects, since we don't detect the

// Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)

// Therefore we don't allow native events to insert text at the end of anchor nodes.

// Therefore we must check that this path actually exists,

// Therefore, the remaining code points should be inserted back.

// These blocks will be replaced with correct values later in code.

// These byte values are shifted from the JIS X 0208 values.

// These next two tests unavoidably show warnings in Chrome. Since fetch will always

// These options can be provided separately as readableXXX and writableXXX.

// They are going to lose state here, but there is no real

// They are optimized for boyer-moore parsing.

// This Subscription's source should match where store came from: props vs. context. A component

// This action has a similiar effect to ActionTypes.INIT.

// This attempts to reset the NODE_TO_KEY entry to the correct value

// This behaves neither like String nor Uint8Array in that we set start/end

// This check is not necessary, but it prevents warnings from browsers about setting unsafe

// This error is thrown as a convenience so you can more easily

// This error was thrown as a convenience so that if you enable

// This essentially would make setting the slate selection during an update meaningless, so we force it

// This fetcher was cancelled from a prior action submission - force reload

// This function is designed to be inlinable, so please take care when making

// This generates a 50 character boundary similar to those used by Firefox.

// This is "just" a `useLayoutEffect`, but with two modifications:

// This is *not* part of the readable stream interface.

// This is a hack to make sure that our error handler is attached before any

// This is a lazily initiated Set of entries which have to be compared

// This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}

// This is only done if running in a standard browser environment.

// This is relevant for synchronous Transform streams

// This is the actual text rendering boundary where we interface with the DOM

// This is the part where you do stuff!

// This is to support parse stuff like "  http://foo.com  \n"

// This is to work around cases where hwm=0, such as the repl.

// This is tricky, but since the `path` and `newPath` both refer to

// This is used to make sure we don't warn about the same

// This limits the `actual` and `expected` property default inspection to

// This may be a relative url. The browser should always be able to interpret it correctly.

// This means that when a number is 256 or larger, it should be XORed with 0x11D.

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)

// This returns true if the highWaterMark has not been hit yet,

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// This was affecting the selection of multiple blocks and dragging behavior,

// This way, back-pressure is actually determined by the reading side,

// This will remove any duplicated frames from the error frames taken

// To avoid recursion in the case that type === "newListener"! Before

// To be able to handle cases like:

// To get around it, we can conditionally useEffect on the server (no-op) and

// To maintain the wrapperProps object reference, memoize this destructuring.

// Total codewords for this QR code version (Data + Error correction)

// Total number of error correction codewords

// Transform all of the points in the value, but if the point was in the

// Transform request data

// Transform response data

// Tricky logic here:

// Trigger a fetcher load/submit for the given fetcher key

// Trigger a navigation event, which can either be a numerical POP or a PUSH

// Trigger the React `useSyncExternalStore` subscriber

// Trim any leading backslashes

// Trim off extra bytes after placeholder bytes are found

// True if the error was already emitted and should not be thrown again

// Try fast path regexp

// Try start flowing on next tick if stream isn't explicitly paused

// Try to match the explicit extension

// Trying to use the custom `instanceof` for Writable here will also break the

// Typed arrays and buffers are checked by comparing the content in their

// UNUSED EXPORTS: Accordion, Alert, Attachment, Authorization, BlockButton, CalendarInput, Cascade, Charts, Check, CheckGroup, Col, ColorPicker, Contacts, ContactsV2, Counter, CounterV2, Criteria, DatePicker, Divider, DownloadCard, Drag, DropDownInput, DropDownList, DropDownListV2, EditorBackground, EditorColor, EditorContext, EditorCopy, EditorCore, EditorFontSize, EditorImage, Error, FixedSizeText, FoldingCard, Footer, FooterV2, FullImage, Gcode, GeneralInput, GoogleMap, HideList, IconDropDownList, Keyword, Keywords, Labels, ListRetrieval, Loading, LockedEditor, MagneticEditor, MarkButton, MergeInput, MobileInput, MobileInputV2, MultiDropDown, Navigation, NavigationDashboard, NavigationLink, NavigationLogin, NavigationSignUp, NavigationUser, OIDCLogin, Pagination, PaginationV2, PasswordInput, PreviewDisplay, PreviewImage, Progress, QRCode, QuestionIcon, Radio, RadioGroup, Rate, ResetInput, SearchInput, SelectInput, Steps, Switch, Table, TableBody, TableHeader, TagCard, TextArea, TextAreaV2, TextEditTool, TimePickerV2, ToolTips, TranslateText, UnderConstruction, Upload, Wrapper, XLSX, addZero, dataToSheet, descendantToReactNode, drUtils, encode, filterDescendant, getDescendantLength, getDeviceType, getProperty, getUniqueId, initDescendant, isTrue, nextFrame, setFileName, sheetToData, useLoginStatus, withEditor

// UNUSED EXPORTS: CANCEL, END, SAGA_LOCATION, buffers, channel, detach, eventChannel, isEnd, multicastChannel, runSaga, stdChannel

// UNUSED EXPORTS: actionChannel, apply, cancel, cancelled, cps, debounce, delay, effectTypes, flush, getContext, join, putResolve, race, retry, select, setContext, spawn, take, takeEvery, takeLeading, takeMaybe, throttle

// URL segment".  This is a key difference from how <a href> works and a

// URLSearchParams so they behave identically to links with query params

// URLs are obnoxious.

// US-ASCII

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// UTF-16LE typically needs two bytes per character, but even if we have an even

// Uhhhh - this should never happen, we should always throw these from

// Undo previously applied mask

// Unhandled 'error' event

// Unhandled stream error in pipe.

// Universal defers to ensure that the match occurs in every branch, so we

// Unshift should *always* be something directly out of read()

// Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it

// Update element-related weak maps with the DOM element ref.

// Update internal state on each render.

// Update our state and notify the calling context of the change

// Usage:

// Use Byte mode as default

// Use Mode.BYTE if Kanji support is disabled

// Use a for loop to avoid recursion

// Use binary if text streaming may corrupt data or the content-type header, or for speed

// Use built-in when available, missing from IE11

// Use higher error correction level as default

// Use memos to handle cycles.

// Use onloadend if available

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Utility functions

// Validates as many continuation bytes for a multi-byte UTF-8 character as

// Verify that the code above has been dead code eliminated (DCE'd).

// Void nodes are a special case, so by default we will always

// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Walk the route tree generating unique IDs where necessary so we are working

// Warning: maxLength not taken into account in base64Write

// We DO NOT return the promise as it gives the user a false sense that

// We always exhaust block nodes before encountering a new one:

// We can delete this so long as we weren't aborted by ou our own fetcher

// We can push more data if we are below the highWaterMark.

// We don't have a core behavior for these, but they change the

// We found a cached entry

// We get TERMINATE flag, i.e. by taking from a channel that ended using `take` (and not `takem` used to trap End of channels)

// We get here if `from` is the exact base path for `to`.

// We get here if `from` is the root

// We get here if `to` is the exact base path for `from`.

// We get here if `to` is the root.

// We go 1 magnitude less, for safety

// We have tests that rely on errors being emitted

// We have to check if a primitive value is already

// We have to get the result again. The lines were all removed before.

// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent

// We matched the extension, so mark this as the end of our path

// We memoize the elements for the rendered child component as an optimization.

// We need this to execute synchronously every time we re-render. However, React warns

// We need to check if there is someone still listening to

// We need to compute the pathnameBase here using the raw splat value

// We need to defer via nextTick because if .destroy(err) is

// We prevent up to two map.has(x) calls by directly retrieving the value

// We saw a non-dot and non-path separator before our dot, so we should

// We saw a non-dot character immediately before the dot

// We saw the first non-path separator

// We saw the first non-path separator, mark this as the end of our

// We saw the first non-path separator, remember this index in case

// We should still report in case we break this code.

// We store a little wrapper promise that will be extended with

// We want to capture the wrapper props and child props we used for later comparisons

// We want to leave trailing slash behavior in the user's control, so if they

// We'll run this callback every time a store subscription update propagates to this component

// Welcome to debugging React Router!

// Welcome to debugging history!

// What if it was a non-redirect Response?

// When a store is created, an "INIT" action is dispatched so that every

// When dragging from another source into the editor, it's possible

// When dropping on a different droppable element than the current editor,

// When matching to the end, ignore trailing slashes

// When performing a sibling move to a later index, the path at the destination is shifted

// When returning StaticHandlerContext, we patch back in the location here

// When the writable side finishes, then flush out anything remaining.

// When there is an inline element, e.g. a link, and you select

// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// While marks isn't a 'complete' text, we can still use loose Text.equals

// While the child is a comment node, or an element node with no children,

// While the output is causally related to the input, it's not a

// While we always re-throw Responses returned from loaders/actions

// Wire up subscribers to update loaderData as promises settle

// With one exception: request that using file: protocol, most browsers

// Writable ctor is applied to Duplexes, too.

// Writable.

// Writing a hex string, for example, that contains invalid characters will

// XXX: Do we actually need both `costs` and `open`?

// Yield position at the start of node (potentially).

// Yield positions every (dynamically calculated) `distance` offset.

// You can't set properties on the editor node.

// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table

// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt

// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html

// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt

// [a, b] -> [a, c]

// [a] -> [a, b]

// [browserify] This triggers on certain types in IE (Map/Set) so we don't

// _data/_error props upon resolve/reject

// _read(n) is called, it transforms the queued up data, calling the

// _something_ that wasn't a Response, but it's not guaranteed/required

// _transform does all the work.

// `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).

// `_writableState` that would lead to infinite recursion.

// `basicLength` is the number of basic code points.

// `beforeinput` events, the browser doesn't think there's ever

// `catch` handler.

// `costs` in that it provides easy access to the node that currently has

// `end` = Infinity –> read file till the end

// `handledCPCount` is the number of code points that have been handled;

// `i` was supposed to wrap around from `out` to `0`,

// `index` is the index of the next character to be consumed.

// `insertText` will insert a node, not just text.

// `isCollapsed` for a Selection that comes from a ShadowRoot.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// `onDrop` is not called. So we need to clean up in `onDragEnd` instead.

// `realHasInstance` is necessary because using plain `instanceof`

// `slice` is the same for buffers and strings.

// `to` values that do not provide a pathname. `to` can simply be a search or

// `undefined` instead of `null` to make default parameter work

// a corresponding pending action.

// a delete forward/backward command it should delete the selection.

// a duplex stream is just a stream that is both readable and writable.

// a few lines down. This is needed to support once('readable').

// a flag to be able to tell if the event 'readable'/'data' is emitted

// a flag to be able to tell if the onwrite cb is called immediately,

// a flag to know if we're processing previously buffered items, which

// a flag to see when we're in the middle of a write.

// a list item of the check list example).

// a nextTick recursion warning, but that's not so bad.

// a passthrough stream.

// a pathological inflate type of transform can cause excessive buffering

// a read from the buffer.

// a regular number and not NaN.

// a revalidation interrupting an actionReload)

// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding

// a terminator of up to four 0s must be added to the right side of the string.

// a transform stream is a readable/writable stream where you do

// a zlib stream might take multiple plain-text writes(), and then

// a) The same built-in type tags

// a) The same number of owned enumerable properties

// abort jobs

// about to reload.  Note that if this is an action reload we would have

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// abstract method.  to be overridden in specific implementation classes.

// accordingly

// action status codes take precedence over loader status codes

// action threw an error that'll be rendered in an errorElement, we fall

// action/location and mark it as uninterrupted, which will skip the history

// actions that shouldn't happen until "later" should generally also

// actualChildProps: unknown,

// add a comma at the end of the actual line. Otherwise the output could

// add binary data sequence to buffer

// add content length

// add custom disposition as third element or keep it two elements if not

// add four 0s to the end.

// add non-empty headers.

// added to it. This is a useful default which helps finding memory leaks.

// adding it to the listeners, first emit "newListener".

// adjacent to an inline is selected, we need to handle these

// after error

// after readable has been emitted but before I/O (nextTick) to

// after the original move path.

// again here. We can't only do it in the setTimeout after the animation frame since that would cause a

// against the signal in resolveDeferredData and they'll get aborted

// aka. 0x7FFFFFFF or 2^31-1

// alias for CanceledError for backward compatibility

// all copies or substantial portions of the Software.

// all that streamy business can't handle numbers

// allocate the first CorkedRequest, there is always

// allow custom headers.

// allow detectFactoryAndVerify to get ownProps

// allow filename as single option

// allow shortcut if iterator expects only two arguments

// allowing connect's shouldComponentUpdate to return false if final

// almost all possible cases.

// already cancelled all pending deferreds so this would be a no-op

// already have a bunch of data in the buffer, then just trigger

// also add dots to indicate skipped entries.

// also returned false.

// also, that means that the chunk and cb are currently

// alternative to using Object.keys for old browsers

// always follow error

// amount of input, and end up with a very large amount of output.  In

// an `originalValue` property. Here, when we detect this, we

// an alias to avoid ESLint no-prototype-builtins detection

// an error, then that'll put the hurt on the whole operation.  If you

// ancestor, so find it by going down from the nearest void parent and taking the

// and 00010001 (0x11) alternately.

// and `from`

// and add it as knownLength option

// and add least significant byte to product

// and add the range to the middle intersecting section. Do the end

// and assume support for certain features below.

// and called read() to consume some data.  that may have triggered

// and checking for undefined. The map can only contain numbers, so it is

// and data mode

// and each group is converted to its 10-bit binary equivalent.

// and encoded as 11-bit binary codes.

// and extra properties of the merge will be.

// and find the original path. We can accomplish this (only in non-sibling)

// and if blockText is exhausted, break to get another block node,

// and if there was a path

// and must be a certain number of bits long, depending on the QR version

// and non-standard so it doesn't fire until after a selection has been

// and optional comparison of the result value with existing values

// and pop the real result func off

// and reset the cache.

// and reset the list

// and retrieved using Object.prototype.toString.call(obj) in JS

// and set distance to the overflow amount, so we'll (maybe)

// and setting state.[historyAction/location/matches] to the new route.

// and spellcheck work as expected.

// and that it still refers to the same node.

// and that the callback throwing will reject the promise.

// and the DOM focus is an Element

// and therefore have no savedScrollPositions available

// and those commands determine that for themselves.

// and thus it doesn't transform selection on its own

// and track whether we should reset scroll on completion

// and undefined/non-string values are only allowed in object mode.

// and values needed to control behavior (forwarded refs, alternate context instances).

// and we can correctly compare DOM text values in components

// and we don't add it for line-breaks.

// and we need to re-evaluate how much data we can return to the user.

// and yield this position in this node.

// another read() call => stack overflow.  This way, it might trigger

// any actions that shouldn't happen until "later" should generally also

// any history stack to undo or redo, so we have to manage these

// any incoming ?index params

// anything else is assumed to be absolute.

// anything else returned as is

// append zoom, x, y into zGrids and return

// apply arguments instead of spreading and mutate a local list of params for performance.

// apply arguments instead of spreading for performance.

// arbitrary, and perhaps not very meaningful.

// are applied with the current formatting

// are needed to reach the required number of bits.

// are the ones that are *expected* to be seen, so we fast-path

// are we there yet?

// aren't composing any more.

// aren't correct and never fire the "insertFromComposition"

// array.shift()

// as a normal load.  resolveDeferredData will return undefined if this

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// as apply() changes the object reference and hence invalidates the NODE_TO_KEY entry

// as soon as we *do* get something into the buffer.

// as the hot path ends with doWrite

// as this effectively replaces "specifying the text in the virtual DOM under the <span> below" on each render

// as well.

// assert.doesNotThrow does not accept objects.

// assume that it's an IPv6 address.

// assume utf8

// at the start of calling end()

// at this point, either we have an explicit point where the

// at this point, the user has presumably seen the 'readable' event,

// atSign can be anywhere.

// attaching it to empty `<div>/<span>` nodes will end up having it erased by

// attempts to reposition its cursor to match the native position. Use

// auth portion cannot go past, or the last @ char is the decider.

// auto height

// available, otherwise a store update may happen between render and the effect,

// avoid collisions between editors in the DOM that share the same value.

// avoid extra slice()

// avoid the two points passing each other and expanding in the opposite

// b) The same prototypes.

// b) The same set of keys/indexes (although not necessarily the same order)

// back to PUSH so that the user can use the back button to get back to

// backward compatibility, the user is explicitly

// backwards compatibility.

// base64 is 4/3 + up to two characters of the original data

// basically just the most minimal sort of Transform stream.

// be a valid example of a transform, of course.)

// be used if it's available, just return false for these to avoid the warnings.

// because it is fragile and can be easily faked with `Object.create()`.

// because onClick handlers can change the document before we get here.

// because otherwise some prototype manipulation in

// because that's known to be hostless.

// been assigned to a new controller for the next navigation

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// before there was *not* enough.

// before we receive the composition end event.

// behavior by simply putting routes with identical paths in the order they

// behavior. The continuation byte check is included three times in the case

// being processed, so move the buffer counter past them.

// below if that happens

// best guess

// both the actual and expected values to the assertion error for

// bottom-left

// broken by replacing non-ASCII by nothing

// buffered _write cb's as it consumes chunks.  If consuming a single

// buffered up.  When you call read(), that calls _read(n) until

// buffers into a series of JS strings without breaking apart multi-byte

// built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose

// built-in `onSelect` handler doesn't fire for all selection changes. It's a

// but Slate's value is not being updated through any operation

// but according to documentation, the `then` method should receive

// but fall back to options given to createSelectorCreator.

// but guard against overflow

// but that's not a great name for it, since that implies a thing where

// by !!value.

// by a generator polynomial

// by setting cancel field on the cb

// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer

// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in

// c) Equivalent values for every corresponding key/index

// c.f. https://nodejs.org/api/http.html#http_message_headers

// cached from whatever global is present so that test runners that stub it

// calLoaderOrAction, but the type narrowing here keeps TS happy and we

// calc text

// call cb(er, data) where data is <= n in length.

// call internal read method

// called, the error will be emitted via nextTick, and

// can be either text nodes, or other void DOM nodes.

// can determine what the offset relative to the text node is.

// can get back on the "throw all redirect responses" train here should

// can go to them. In Firefox, this must be prevented because it

// can match lots of different string values (e.g., 1n == '+00001').

// can-promise has a crash in some versions of react native that dont have

// cancel them for now

// cancellation

// cancelled. Let them through and wait for the composition to end.

// case "bulleted-list":

// case "heading-five":

// case "heading-four":

// case "heading-one":

// case "heading-six":

// case "heading-three":

// case "heading-two":

// case "link":

// case "list-item":

// case "numbered-list":

// case "pre":

// case "quote":

// catch synchronous failures; see #152

// catch synchronous failures; see #152 and #441

// catch up to blockText in the next leaf text node.

// cause everything after the first invalid character to be ignored. (e.g.

// cause the system to run out of memory.

// causes duplicate inserts.

// causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139

// change. The NodeError classes here all expose a `code` property whose

// changed

// changed since we began.

// changes to the function body.

// character.

// characters.

// check error in parameters

// check for updates after dispatched actions, and trigger re-renders.

// check if already loaded

// check if async happened

// checkTypeSupport(), since that calls getXHR().

// children and selection can get out of sync for one render pass. So we

// children do.

// chop off any delim chars.

// chop off from the tail first.

// circuited because fetchControllers would have been aborted and

// clean up jobs

// cleanup event handlers once the pipe is broken

// cleanup via _internalActiveDeferreds

// code unit is the high surrogate of a surrogate pair

// coercion fail below.

// comes *before* the @-sign.

// common use case when inserting from a non-selected state.

// comparison for now.

// compiled once on the first module load.

// component

// composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038

// conditions prevent the data from being read:

// connected to the store via props shouldn't use subscription from context, or vice versa.

// const cRef = useRef<HTMLDivElement | null>(null);

// const matchValue = origin.match(regExp)?.[1];

// const offsetY = thickness / 2;

// const origin = window.location.origin;

// const originPoint = (reverse: boolean): [number, number] | undefined => {

// const regExp = /^https?:\/\/([^.]+)\./;

// contains buffers or objects.

// contains it's action submission info + action data

// content = <></>;

// content, since the spacer is before void's content in the DOM.

// contenteditable behaviors. (2019/05/08)

// continuation byte. If an invalid byte is detected, -2 is returned.

// contribute to `blockText` or `leafText` - their parent and

// convert \n into \r\n. The bug causes a loop when slate-react

// convert all headers to arrays.

// coordinates are closest to.

// copies of the 'buffer' package in use. This method works even for Buffer

// copy of this software and associated documentation files (the

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

// cost from s to v that may or may not be less than the current

// cost of u to v across e), update v's cost in the cost list and

// could still be different because they will be interpreted differently).

// count buffered requests

// counters need to account for us potentially splitting at a non-leaf.

// create an irreducible generator polynomial

// create flattened list of headers

// created ones.

// cross domain), use the page location. Otherwise use example.com

// current fetcher which we want to keep in it's current loading state which

// current line is at least line three, add some of the former lines and

// current month;

// custom filename take precedence

// custom filepath for relative paths

// custom header specified (as string)?

// d) For Sets and Maps, equal contents

// dashboard

// day

// deal in the Software without restriction, including without limitation the

// debounced at least once.

// decode

// decode the last character properly.

// deeply ugly to write APIs this way, but that still doesn't mean

// default bottom

// default left

// default options

// default right

// default text/* to utf-8

// default top

// default, and calling `preventDefault` hides the cursor.

// defaultMemoize now supports a configurable cache size with LRU behavior,

// defaulting to the root match

// defensive measure

// defer the callback if we are being called synchronously

// define these here so at least they only have to be

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// designed to be sync/async agnostic.

// destroy(err, cb) is a private API

// determiner: 'must be' or 'must not be'

// didn't get any data, stop spinning.

// different from an actionError in that sense.

// direction

// directly for route requests and prevent the unwrapping into an

// directly next to a non-contenteditable element (= the placeholder).

// display purposes.

// distribute, sublicense, and/or sell copies of the Software, and to permit

// do not bubble up synchronous failures for detached forks

// do we need to behave any differently with our non-redirect errors?

// doWrite is almost always async, defer these to save a bit of time

// document.body.appendChild(image);

// dom text element, chrome will put the selection behind the actual dom

// domSelection is not necessarily a valid Slate range

// don't break things.  But we need to wrap it in a try catch in case it is

// don't hoist over string (html) components

// don't leave dangling pipes when there are errors.

// don't process rest of the results

// don't repeat yourself

// don't rerender on equalityFn change since we want to be able to define it inline

// don't skip over falsy values in objectMode

// done here

// drain event flag.

// draw text

// draw textbox

// e.g. /files/images/avatar.jpg -> files/finances.xls

// e.g. for streaming directly from a remote server,

// e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

// editable element no longer has focus. Refer to:

// editor to stay focused when the tab becomes focused again.

// effect.

// effects in the iterator's finally block will still be executed

// eg makes native spellcheck opt out from checking the text node.

// element inside a void node).

// emit 'drain' before the write() consumer gets the 'false' return

// emit 'readable' now to make sure it gets picked up.

// emit a single compressed chunk some time in the future.

// emit an error with process.nextTick

// emit prefinish if the only thing we're waiting for is _write cbs

// emit removeListener for all listeners on all events

// empty or either doesn't have path or not an http response or not a stream

// empty string to avoid regexp issues

// enabling "pause on exceptions" in your JavaScript debugger.

// encode to utf16 (surrogate pair dance)

// encode utf8

// encoding is 'binary' so we have to make this configurable.

// end on a partial character, we simply let v8 handle that.

// end up in an overlapped onwrite situation.

// ends since it will already have been committed to the DOM.

// ensure it's an object, and not a string url.

// equal with !=.

// equal, check further special handling.

// equivalence is determined by having:

// error boundary, defaulting to the root match

// error messages contain the necessary information nevertheless.

// errors or aborted deferred values

// errors, and revalidation

// errors, etc.

// escaped, even if encodeURIComponent doesn't think they

// eslint-disable-line consistent-return

// eslint-disable-line eqeqeq

// eslint-disable-line func-name-matching

// eslint-disable-line no-eval

// eslint-disable-line no-restricted-syntax, no-unreachable-loop

// eslint-disable-line no-self-compare

// eslint-disable-line no-unused-expressions

// eslint-disable-next-line consistent-return

// eslint-disable-next-line eqeqeq

// eslint-disable-next-line func-names

// eslint-disable-next-line no-console

// eslint-disable-next-line no-control-regex

// eslint-disable-next-line no-empty

// eslint-disable-next-line no-eq-null,eqeqeq

// eslint-disable-next-line no-nested-ternary

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-redeclare

// eslint-disable-next-line no-restricted-syntax

// eslint-disable-next-line no-throw-literal

// eslint-disable-next-line no-undef

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-use-before-define

// eslint-disable-next-line react-hooks/exhaustive-deps

// even href="" will remove it.

// event emitter implementation with them.

// ex:

// exactly if and only if its current content does not match our current virtual DOM.

// execution of the loader/action, such as a 404/405 error.

// explicitly set this

// exposed for testing purposes only.

// extends data size to data+genPoly size

// extension

// extension -> mime

// extract a block of data from buffer

// extracted by mini-css-extract-plugin

// fall back to React's leaky polyfill instead just for it. It

// fall back to guessing at the input intention for hotkeys.

// fallback for when writableStream or pipeTo aren't available

// fallback to the default content type if `value` is not simple value

// fast forward iteration index

// fast path needed to support multiple this.push()

// fetcher gets aborted, so we just leave result untouched and short circuit

// figure out if it's got a host

// filter out skipped interceptors

// finally, reconstruct the href based on what has been validated.

// find the first instance of any hostEndingChars

// find the node, u, that currently has the shortest path from s.

// find the source for a warning that appears in the console by

// fire for any change to the selection inside the editor. (2019/11/04)

// first one that isn't inside a nested editor.

// first, and then afterwards for the correct `element`. (2017/03/03)

// first, if it's not file:, then we MUST have a host,

// first. This allows people to have fine-grained control over the matching

// fixed module

// flowing again.

// flowing needs to be set to true now, otherwise

// following conditions:

// foo x y z

// foo-x-y-z

// foo.x.y.z

// foo[x][y][z]

// for a list of tags pre-defined in the spec.

// for readable, but we still have to call

// for tests

// for text direction.

// for the `strictEqual` operator.

// for the move to impact the true path to the location where the node

// for virtual (non-string, non-buffer) streams, "length" is somewhat

// force reflow to put everything in position

// forceComponentUpdateDispatch: React.Dispatch<any>,

// forcing another re-render, which we don't want.

// format a parsed object into a url string

// formidable and the browser add a name property

// fragment to the HTML, to decode on future pastes.

// fragment to the void node's content node instead of the spacer, because

// from a prior error or from a cancelled pending deferred

// from the name.

// from within `ifError` and add the original error frames to the newly

// fs- and request- streams have path property

// full Locations now and avoid the need to run through this flow at all

// function because try/catches deoptimize in certain engines.

// furnished to do so, subject to the following conditions:

// get content length and fire away

// get extensions

// get the extension ("ext" or ".ext" or full path)

// getXHR().

// globalThis is undefined in older browsers

// go through the array every three bytes, we'll deal with trailing stuff later

// got a fragment string.

// got a match.

// got an "options" object

// handle relative paths to be safe (might happen when process.cwd() fails)

// handled by onerror instead

// handler in flow(), but adding and removing repeatedly is

// handling at a lower level.

// hanging selection.

// has it been destroyed

// has not been initialized yet

// has returned yet), so that we know whether or not it's safe to emit

// hash is always overridden, no matter what.

// hash string, in which case we should assume that the navigation is relative

// have a good chance at having a non-empty extension

// have meta information about the inspected properties (i.e., know where

// have non-ASCII characters, i.e. it doesn't matter if

// have to do it manually.

// have to manually get the selection here to ensure it's up-to-date.

// have to use hacks to make these replacement-based features work.

// have to use this unstable API to ensure it batches them. (2019/12/03)

// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but

// heavy sets but it is a minor slow down for primitives. As they are fast

// here which only compares marks anyway.

// here.  For example, imagine a stream where every byte of input is

// here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535

// high surrogate, and there is a next character

// hit reducers

// hit, then we've found a branch that doesn't include a match, which

// horizontal

// hostnames are always lower case.

// hotkeys manually because browsers won't be able to skip over

// hotkeys ourselves. (2019/11/06)

// hour

// hour of 12

// hour of 24

// how the browser resolves relative URLs.

// however, don't suppress the throwing behavior for this.

// however, if it ends in anything else non-slashy,

// however, if we've ended, then there's no point, and if we're already

// hrefs like //foo/bar always cut to the protocol.

// http-browserify did it, so I will too.

// http://a@b?@c => user:a host:c path:/?@c

// http://a@b@c/ => user:a@b host:c

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

// http://javascript.about.com/od/problemsolving/a/modulobug.htm

// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx

// http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames

// https if specified, fallback to http in any other case

// https://bugs.chromium.org/p/chromium/issues/detail?id=447523

// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/

// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

// https://github.com/erikras/lru-memoize

// https://github.com/facebook/react/issues/11211

// https://github.com/facebook/react/issues/14259#issuecomment-439702367

// https://github.com/facebook/react/issues/5785

// https://github.com/felixge/node-form-data/issues/38

// https://github.com/feross/buffer/pull/148

// https://github.com/form-data/form-data/issues/196

// https://github.com/form-data/form-data/issues/262

// https://github.com/form-data/form-data/issues/40

// https://github.com/ianstormtaylor/slate/issues/1819

// https://github.com/joyent/node/issues/7819

// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js

// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c

// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9

// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b

// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js

// https://github.com/soldair/node-qrcode/issues/157

// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae

// https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web

// hunting for something thats deep-(strict-)equal to it. To make this

// i.e. a generator function returns an iterator

// if (

// if (!(symObj instanceof Symbol)) { return false; }

// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

// if (leaf.code) {

// if (sym instanceof Symbol) { return false; }

// if (typeof Symbol.prototype.toString !== 'function') { return false; }

// if _final has been called

// if a url ENDs in . or .., then it must get a trailing slash.

// if clearTimeout wasn't available but was latter defined

// if hostname begins with [ and ends with ]

// if it is file:, then the host is dropped,

// if it's a known url protocol, then changing

// if it's not a basic code point

// if no content type. allow it to be empty array

// if no port provided use default one

// if prevNode is first child in parent,don't remove it.

// if setTimeout wasn't available but was latter defined

// if the dest has an error, then stop piping into it.

// if the length is currently zero, then we *need* a readable event.

// if the path is allowed to go above the root, restore leading ..s

// if the readable side is ready for autoDestroy as well

// if the reader is waiting for a drain event from this

// if the relative url is empty, then there's nothing left to do here.

// if the second value is one of these values and the first isn't.

// if the selection is a hanging range that ends in a void

// if the url is a non-slashed url, then relative

// if the writable side is ready for autoDestroy as well

// if there's no matching parent - usually means the node is an editor - don't do anything

// if there's nothing in the write buffer, then that means

// if there's something in the buffer waiting, then process it

// if this is a duplex stream mark the writable part as destroyed as well

// if true, a maybeReadMore has been scheduled

// if we are sync, wait until next tick to emit the data.

// if we currently have less than the highWaterMark, then also read some

// if we didn't call the onwrite immediately, then

// if we ever do those wrong, this throw will surface the error in our tests.

// if we have detected an error in the meanwhile

// if we have multiple next() calls

// if we increase `i` as we go, then subtract off its starting

// if we need a readable event, then we need to do some reading.

// if we still have not hit it, then the entire thing is a host.

// if we're already writing something, then just put this

// if we're doing read(0) to trigger a readable event, but we

// if we're not piping anywhere, then do nothing.

// if we've ended, and we're now clear, then finish it up.

// ignore unnecessary end() calls.

// immediately, or on a later tick.  We set this to true at first, because

// implementation from standard node.js 'util' module

// implications (stack, `uncaughtException`, `async_hooks`)

// import { labelsLine } from "./Unit/Plugins/labelsLine";

// important when wrapping filters and duplexes.

// in IE 6-8, typeof document.all is "object" and it's truthy

// in a very close way to the original in case both sides are actually

// in all copies or substantial portions of the Software.

// in certain misbehaving browsers they aren't weirdly cloned/destroyed by

// in onprogress, not in onreadystatechange with xhr.readyState = 3

// in resolveDeferredResults

// in some cases, a decoration needs access to the range / selection to decorate a text node,

// in the HTML, and can be used for intra-Slate pasting. If it's a text

// in the correct order we increment toRef to account for that

// in the middle of a navigation

// in the queue, and wait our turn.  Otherwise, call _write

// in the same tick, so changing this is semver major.

// in this case and thus never actually perform the action.

// in turn another _read(n) call, in which case reading = true if

// in what line the property starts and ends).

// including comment nodes, so try to find the right text child node.

// inclusive, starts with 0

// incoming file to finish to get its size.

// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)

// incrementing `n` each time, so we'll fix that now:

// indentation intact.

// index routes, so don't add them to the list of possible branches.

// index that accounts for any added/removed nodes.

// initialise

// input values.

// inserted after a mark placeholder is inserted with an anchor offset off by 1.

// inserted next to it still.

// instances of Error.

// instances that were created from another copy of the `buffer` package.

// instead create a failed task. See #152 and #441

// instead of using params["*"] later because it will be decoded then

// instead since it will need to be split otherwise.

// intentionally not specifying dependencies, so that this effect runs on every render

// internally, and returns false if there's a lot of pending writes

// interpreted as an integer from 0-255, and then results in that many

// is an array. In most libs I've looked at, it's an equality function or options object.

// is created synchronously, otherwise a store update may occur before the

// is interrupted by a navigation, allow this to "succeed" by calling all

// is otherwise identical.

// is re-rendered, the selectors are called again, and

// is required because React's `beforeinput` is fake and never really attaches

// is surrogate component

// isContentEditable exists only on HTMLElement, and on other nodes it will be undefined

// isn't, so we can adjust the target range start offset if we are confident this is the

// it as the trailing edge, or we've hit the `maxWait` limit.

// it becomes responsible for boundary

// it doesn't respect `end` options without `start` options

// it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after

// it is async

// it means that we need to wait until it does.

// it so that it is before merging.

// it was consumed

// it would pause the execution at this line.

// it's absolute.

// it's in progress.

// it's relative

// itself becomes unfocused, so we want to abort early to allow to

// itself.

// just one destination.  most common case.

// just pull out the search.

// just useEffect instead to avoid the warning, since neither will run anyway.

// kMaxShortLength and if neither is an object and at least one of them is

// keep as is for the time being and just let any incoming keys take precedence

// keep iterating to find a sibling non-void, non-comment node.

// keep this to type narrow to a success result in the else

// keys multiple times.

// keys.

// kicks up the generator

// known cost to v.

// larger one:

// last char was a lead

// leaky polyfill that only fires on keypresses or clicks. Instead, we want to

// legacy

// legacy streams

// legacy.

// legacy...

// length is NaN (which is otherwise coerced to zero.)

// let projectType: projectType = 'profile';

// like cypress where cy.window does not work realibly

// like href='?foo'.

// line so consecutive diverging lines show up as +++--- and not +-+-+-.

// linked list can remove elements from the beginning faster than

// links like ../.. should be able

// loadRouteData operating on a Request instead of a Location

// loaderData for loaders that did not need to reload.  We have to

// loaderData is stable across resolve/reject

// loaders are successful we take the deepest status code.

// loaders during the next loader round

// log is just a thin wrapper to console.log that prepends a timestamp

// longer be forced to treat every error message change as a semver-major

// look weird as in:

// looks like it's the last one

// loop.

// low surrogate

// major reason we call this a "to" value instead of a "href".

// make all the buffer merging and length checks go away

// make it a Stream

// making it explicit this property is not enumerable

// managing destroyed

// manually merge here since we aren't going through completeNavigation

// mark that we need a transform, so that any data that comes in

// match only if we find the end of this path segment.  Look for an optional

// matching and only if it's not, go hunting for it.

// maxKeys <= 0 means that we should not limit keys count

// may be a completely synchronous operation which may change

// may be undefined if not provided. All assertion methods provide

// may call the _write() callback in the same tick, so that we don't

// means the match is not universal.

// message may change, the code should not.

// migration guide from v5 as a means of disambiguation between `to` values

// mime -> extensions

// minute

// mismatch warning app moves to browser. Pass-through consumer props when

// mode the stream is in. Currently this means that `null` is never accepted

// modified from https://github.com/es-shims/es5-shim

// modules monkey-patch it to support additional encodings

// monitors are expected to have a certain interface, let's fill-in any missing ones

// month

// more recent than the navigation, we want the newer data so abort the

// most browsers. (2018/04/27)

// movable bar

// moves by looking at the impact of the move operation on the node

// multiply by 2

// must be multiple of 3

// navigation

// navigation GET submissions which run all loaders), we need to preserve

// navigation and complete it with the fetcher data

// navigation to the navigation.location but do not trigger an uninterrupted

// navigation, we'll just let the follow up loader execution call all loaders

// necessarily symmetric or synchronous transformation.  For example,

// necessary. v is the node across the current edge from u.

// need to be.

// needed or are available. If we see a non-continuation byte where we expect

// needed to avoid cross-origin issues on CodeSandbox

// needed to complete the UTF-8 character (if applicable) are returned.

// needs to be manually focused.

// never call cb(), then you'll never get another chunk.

// new navigation to update history normally

// newPath are stable with respect to each other.

// next month

// next or previous node, depending on which side the `x` and `y`

// no combination of Error Correction Level and data mask pattern

// no lead yet

// no more data can be written.

// no need to bother with the length

// no need to calculate range

// no path at all.  easy.

// no query string, but parseQueryString still requested

// no selection, insert at the end of the document since that is such a

// no such thing as a sparse string.

// node ID => cost

// node ID => predecessor node ID

// node that was removed we need to update the range or remove it.

// node v0.6 has a bug where array lengths can be Set but not Defined

// node, so we render a zero-width space so that the selection can be

// node, wrap it in a `<span>` so we have something to set an attribute on.

// node.js module exports

// node::ParseEncoding() requires lower case.

// non- editable section of an element that isn't a void node (eg.

// non-captured trailing slash (to match a portion of the URL) or the end

// not CAN_USE_DOM (SSR) and default to falsy value

// not `zero`, use the strict equal comparison to visualize the output.

// not a function

// not an actual buffer we keep track of, but a measurement

// not happen before the first read call.

// not happen before the first write call.

// not listening for removeListener, no need to emit

// not used by this implementation

// nothing buffered

// now rest is set to the post-host stuff.

// null coalescing text to make sure we're not outputing "null" as a string in the extreme case it is nullish at runtime

// number of bytes are available.

// number of bytes available, we need to check if we end on a leading/high

// number of characters that are being encoded.

// number of pending user-supplied write callbacks

// obj.hasOwnProperty(prop) will break.

// object (or non strict only: a not matching primitive) we'll need to go

// object stream flag to indicate whether or not this stream

// object stream flag. Used to make read(n) ignore n and to

// occurred", we error-wrap so the callback consumer can distinguish between

// of date. So instead of using the `op.newPath` directly, we

// of how much we're waiting to get pushed to some underlying

// of merging the two. This is a common rich text editor behavior to

// of the path (if we've matched to the end).  We used to do this with a

// of this software and associated documentation files (the 'Software'), to

// old school shim for old browsers

// old-style streams.  Note that the pipe method (the only relevant

// older versions that do not include `useSyncExternalStore` (React 16.9 - 17.x).

// on the source.  This would be more elegant with a .once()

// one allocated and free to use, and we maintain at most two

// one, this is due to the window being blurred when the tab

// one, we "replace" the validated continuation bytes we've seen so far with

// onerror should only fire if it's a network error

// only contain numeric keys, we don't need to exam further than checking

// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.

// only works for the `insertText` input type.

// or guess it from the filepath or filename

// or if it's http-reponse

// or on a later tick.  We set this to true at first, because any

// or treat it as options object

// or try `name` from formidable, browser

// or try `path` from fs-, request- streams

// or try http response

// original length, plus the receiver, minus any additional arguments (after the receiver)

// original notice:

// other (month || day)

// other inline nodes, or parent blocks that only contain inlines and

// other siblings that may have been rendered alongside them.)

// otherwise advance blockText forward by the new `distance`.

// otherwise just update with the fetcher data, preserving any existing

// outputted bit calls the readcb, and subsequent chunks just go into

// override this function in implementation classes.

// overrideNavigation which will override the normalLoad in the case of a redirect

// pad the end with zeros, but make sure to not forget the extra bytes

// pad the string on the right with 0s to make the string's length a multiple of 8.

// pad with 0s to the left to reach the needed number of coefficients

// pairwise.

// param change for this match, /users/123 -> /users/456

// parent re-rendered without this component and we're about to unmount.

// parse provided url if it's string

// part of this class) is overridden in the Readable class.

// partial character, the character's bytes are buffered until the required

// pass along options.knownLength

// passed in one, but it's not the right one.

// path component

// path.resolve([from ...], to)

// pause() and resume() are remnants of the legacy readable stream API

// pending ranges.

// permission from the author, Mathias Buus (@mafintosh).

// persons to whom the Software is furnished to do so, subject to the

// pipeTo method isn't defined. Can't find a better way to feature test this

// points before the last delimiter, or `0` if there is none, then copy

// points were copied; start at the beginning otherwise.

// populates missing values

// portalRef.current = el;

// pre month ;

// prefix data with mode indicator (4 bits)

// preserve the "error" state outside of queryImpl.

// preserving any new action data or existing action data (in the case of

// prettier-ignore

// prevent deeper status codes from overriding

// prevent losing formatting when deleting entire nodes when you have a

// prevents cancelling an already completed effect

// prevents unnecessary cancellation

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// programmatic access of paste events coming from external windows

// projectType = convertSmallHumpName(matchValue ?? 'dashboard') as projectType;

// propagates cancel downward

// properly. In Chrome, the selection isn't properly extended.

// properties that were previously defined, but are now missing, must be deleted

// properties.

// property of a typed array.

// property to emulate a data property that does not suffer from

// property, i.e., returning the value rather than the getter

// props have not changed.

// protocols that always contain a // bit.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// prototypally inherits from Readable, and then parasitically from

// proxy all the other methods.

// proxy certain important events.

// pull out port.

// put that good code in getHeaders to some use

// put the host back

// range from the void node's spacer span, to the end of the void node's

// re-load which would have put _new_ controller is in fetchControllers

// re-submit which would have put _new_ controller is in fetchControllers

// read it all, truncate the list

// read part of list

// readability by reducing the number of total changed lines).

// readable and reset the state. However this needs to happen

// reader.onerror = ??? // TODO: this

// reading, then it's unnecessary.

// readystate handler is calling before onerror or ontimeout handlers,

// real `beforeinput` events sadly... (2019/11/04)

// reasonable to interpret their underlying memory in the same way,

// reassigned to new controllers for the next navigation

// recurse to see if the next one is a word character or not.

// redirect

// redirect until the action/loaders have settled

// redirects/errors

// reducer returns their initial state. This effectively populates

// reject if we are waiting for data in the Promise

// reject straight away

// released. This causes issues in situations where another change happens

// reliably in a browserify context because there could be multiple different

// remaining string for the next iteration.

// remove all the event listeners that were added.

// remove all zeros from buffer head

// remove all.

// removing the original position, the second step's path can be out

// render at the right error boundary after we match routes

// render so we don't need to load them

// replace with an optional submission

// replacement char (U+FFFD) and advance only 1 byte

// request.destroy just do .end - .abort is what we want

// require('getprototypeof');

// reset leftover jobs

// resolution will treat //foo/bar as host=foo,path=bar because that's

// resolve iterator

// resolve redirects and decompress

// resolved), then consume it here

// result.protocol has already been set by now.

// results in issues with keyboard navigation. (2017/03/30)

// resume within the same tick will have no

// resume()

// return EC data blocks (last n byte, where n is the degree of genPoly)

// return salvaged results

// return the raw Response or value

// returned by next() and store the error

// reuse the free corkReq.

// revalidation

// revalidation so that history correctly updates once the navigation completes

// revalidations

// right after it (the start of the next node).

// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or

// route context. This is explained in `Note on `<Link to>` values` in our

// route specified by routeId) for the closest ancestor error boundary,

// route tree depth-first and child routes appear before their parents in

// safe to check for undefined only.

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// selection to return incorrect zero values (https://bugs.chromium.org/p/chromium/issues/detail?id=435438)

// sell copies of the Software, and to permit persons to whom the Software is

// semver major update we should change the default to this.

// send back results we have so far

// separators at the end of the string, stop now

// set default options

// set public members

// set selection.

// set that won't get normalized away

// set the extension -> mime

// set up data events if they are asked for

// setup cancellation logic on the parent cb

// shall be treated as being handled or not.

// shim for using process in browser

// should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized

// should we decode strings into buffers before passing to _write?

// show up elsewhere when pasted.

// similar to how Writable.write() returns true if you should

// similar to x >= 256, but a lot faster (because 0x100 == 256)

// since _read has to be called to start processing a new chunk.  However,

// since the document and dom state do not match.

// since the masking operation must be performed only on the encoding region.

// since we need it for React Context.  But this helps keep our submit and

// single equals check for both `null` and `undefined`

// single line and the input length is less than the column length.

// skip secondary callbacks

// skip the remapping

// slow case. multiple pipe destinations.

// so Buffer.isBuffer(Buffer.prototype) will be false

// so enabled only if the selection has been collapsed.

// so even if it's empty, it has to be present.

// so if we're running in a browser that supports `fetch`, avoid calling getXHR()

// so it basically checks if there is any value added to the form

// so that it shows up in the selection's fragment.

// so they sort equally.

// so we have to manually schedule it to ensure we don't 'throw away' the selection

// so we need to add an extra trailing new lines to prevent that.

// so we should call onloadend on the next 'tick'

// so we sometimes might end up stuck in a composition state even though we

// socket or file.

// solely with AgnosticDataRouteObject's within the Router

// some bits pass through, and others are simply ignored.  (That would

// something with the data.  Sometimes it's called a "filter",

// sort array keys based on it's values

// sort object's keys just on own merit

// sorting helpers

// source gets the 'end' or 'close' events.  Only dest.end() once.

// specific writer, then it would cause it to never start

// specify a basename with a trailing slash, we should support it

// splat param changed, which is not present in match.path

// split first since we don't need to update the offset that way.

// standard global objects

// start out asking for a readable event once data is transformed.

// start the flow if it hasn't been started already.

// start/end edge cases where block extends beyond range.

// state defaults to `null` because `window.history.state` does

// state.  If not, we need to switch to our loading state and load data,

// state.  We'll update our own state once the navigation completes

// stay inside the bounds (because we will mainly use this table for the multiplication of

// stepper arrow on a number input). (2018/05/04)

// still need to fetch file size from fs

// stop still active jobs

// store current index

// stream classes.  When you write(chunk), that calls _write(chunk,cb)

// string.

// strip [ and ] from the hostname

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// such a pathological inflating mechanism, there'd be no way to tell

// support once('readable', fn) cycles. This means that calling

// surrogate. In that case, we need to wait for the next two bytes in order to

// swiftkey insert causing the issue.

// sync guard flag.

// synthetic stream cases, such as passthrough streams, _read

// take everything except the protocol from relative

// take read range into a account

// take whole

// target is originating from an internal "restricted" element (e.g. a

// tell the dest that it's being piped to

// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4

// temp disabled per https://github.com/ljharb/object.assign/issues/17

// text element, causing domRange.getBoundingClientRect() calls on a collapsed

// text events are fired with the correct target ranges, only the final 'insertComposition'

// text.

// textContent.length instead.

// that Readable wants before the first _read call, so unset the

// that begin with `/` and those that do not. However, this is problematic for

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that drops are allowed. Editable content is droppable by

// that have been unsubscribed in the  middle of the notification loop.

// that nothing more will ever be provided

// that only contain block nodes. Similarly, only allow inline nodes in

// that the Readable class should behave improperly, as streams are

// that the current editor does not have focus.

// that throws a loader error, and then clear it out to indicate that

// that to be increased. Set to zero for unlimited.

// that we're awaiting a 'readable' event emission.

// that wrap target node. So we reverse the order.

// the "flattened" version.

// the 'readable' event and move on.

// the ReadableState constructor, at least with V8 6.5

// the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)

// the WritableState constructor, at least with V8 6.5

// the `fulfill` and `reject` arguments as well or it may be never resolved.

// the `instanceof` check but they should be treated as of that type.

// the accuracy of the 'content-type' header aren't

// the amount that is being written when _write is called.

// the animation frame to ensure it displays the correct state.

// the callback that the user supplies to write(chunk,encoding,cb)

// the callback that's passed to _write(chunk,cb)

// the caller expect this to happen before if

// the character value of the final character is encoded as a 6-bit binary number.

// the common path parts

// the context consumer to use

// the cost of the shortest paths to any or all of those nodes as

// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].

// the diff will be applied to and add the offset inside the diff.

// the drain event emission and buffering.

// the editor to inside a void node's spacer element.

// the entire buffer is not flushed immediately on write()

// the error to be emitted nextTick. In a future

// the final one or two digits are converted to 4 or 7 bits respectively.

// the first basic code points to the output.

// the first instance of /, ?, ;, or # ends the host.

// the first object and say A equals B

// the host field still retains them, though

// the host is the remaining to the left of the first non-host char

// the initial state tree.

// the initial updateState() because we've not yet rendered <ScrollRestoration/>

// the known shortest path from s.

// the local part (i.e. everything up to `@`) intact.

// the lowest limit is Chrome, with 0x10000 args.

// the middle of the notification loop, where `subscription` will then be null. This can

// the minimum depth. Otherwise those values would be too verbose compared

// the new state tree with any relevant data from the old one.

// the no-half-open enforcer

// the number of writers that are awaiting a drain event in .pipe()s

// the operation was applied.

// the override mistake, that accessor's getter is marked with

// the placeholder itself and thus includes the zero-width space inside edit events.

// the point at which it stops calling _read() to fill the buffer

// the point at which write() starts returning false

// the point before the location passed in

// the pre-submission form location to try again

// the prependListener() method. The goal is to eventually remove this hack.

// the promise is actually somehow related to the callback's execution

// the protocol does weird things

// the protocol is something else, like 'file:'

// the read buffer, and will cause it to emit 'readable' if necessary.

// the readable code triggers during a read() call

// the results of the previous transformed chunk were consumed.

// the root / URL.

// the same options object.

// the same snapshot in time, there's a mismatch. After either

// the select event fires twice, once for the old editor's `element`

// the selection changes. This is required because React's `onSelect` is leaky

// the span is intentionally same on every render in virtual DOM, actual rendering happens in the layout effect above

// the start and end nodes.

// the state of the read buffer, providing enough data when

// the symbols.

// the system to stop doing the transform.  A single 4MB write could

// the text content inside the zero width space.

// the upcoming resume will not flow.

// the void node with the zero-width space not being an empty

// the way web server expects it

// them.

// then go ahead and try to read some more preemptively.

// then it must NOT get a trailing slash.

// then its children might just change - DOM responds to it on its own

// then leading and trailing spaces will be ignored. (2017/09/21)

// then return the task descriptor to the caller

// then slice off the results into separate arrays so we can handle them

// then we have _some_ form of path in our regex so we should expect to

// then we will iterate over their content.

// then you will select the whole text node when you select part the of text

// there can be only a single saga error created at any given moment

// there if needed

// there will be only 2 of these for each stream

// there's a hostname.

// there's enough pending readable data buffered up.

// therefore not reporting its length accurately..

// therefore synchronous length calculation is false.

// this can emit finish, and it will always happen

// this can emit finish, but finish must

// this ever happen :/

// this function wraps mapToProps in a proxy function which does several things:

// this is IE 8, which has a broken gOPD

// this is here so that some node-core streams can optimize string

// this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable="false"(readOnly)

// this logic is optimized to support for await loops,

// this magic zIndex="-1" will fix it

// this must be 0 before 'finish' can be emitted

// this please also change that :)  Eventually we'll DRY this up

// this state will store the image when user uploard

// this way, you can call url_format() on strings

// this._events to be assigned to a new object

// throw away the existing file, and take the new path instead.

// timerValue && window.clearTimeout(timerValue);

// tiny amounts

// to allow the error boundary to take over

// to avoid piling up things on the stack

// to be an `instanceof Error` either, so we have to use throw here to

// to before the insertion point instead of after. To ensure our group of nodes are inserted

// to begin with, then we MUST have a path.

// to call and will commit it when we complete the navigation

// to catch up with `blockText`, so we can reset `distance`

// to change the selection because it is the range that will be deleted,

// to check this improves the worst case scenario instead.

// to clean up potentially wonky urls.

// to continue to work with older versions of Node.js that do not include

// to crawl up to the hostname, as well.  This is strange.

// to detect a Buffer instance. It's not possible to use `instanceof Buffer`

// to determine what the child props should be

// to focus the contenteditable element too. (2016/11/16)

// to get stuck in a permanently paused state if that write

// to its direct text and zero-width spans. (We have to filter out any

// to make it re-entrance safe in case destroy() is called within callbacks

// to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter

// to return the correct value, we have to listen to the focusin and focusout events without useCapture here.

// to run code synchronously immediately before react commits the component update to the DOM.

// to stop rendering, so that browser functions like autocorrect

// to support expected plain text.

// to support http.request

// to the actual error message which contains a combined view of these two

// to the current location's pathname and *not* the route pathname.

// to the editor from an embedded editable element (eg. an <input>

// to the left of the last @ sign, unless some host-ending character

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to the readable side.  You may call 'push' zero or more times.

// to the real event sadly. (2019/11/01)

// to their upper/lower bounds if the value passed is out of range.

// too slow.

// top-left

// top-right

// tracks down the current cancel

// trailing edge, the system time has gone backwards and we're treating

// transform `op.path` to ascertain what the `newPath` would be after

// transplited with Babel

// triggering a `beforeinput` expecting the change to be applied to the immediately before

// trim before proceeding.

// try to find the right one.

// try...catch because iOS limits us to 100 pushState calls :/

// two GF numbers, no more).

// type is a string, number, bigint or boolean. The reason is that those values

// type that we need. So instead, insert whenever a composition

// undefined

// undefined is handled specially as per ECMA-262 6th Edition,

// underlying ArrayBuffer. This optimization requires that it's

// underlying stream.

// undocumented cb() API, needed for core, not for public API

// unexpected trail

// unhang the range to avoid mistakenly including the void

// uninterrupted revalidations unless told otherwise, since we want this

// unless they had them to begin with.

// unmatched surrogate; only append this code unit, in case the next

// unpaired lead

// unprintable ASCII chars + non-ASCII chars

// unwrapNode will call liftNode which does not support splitting the node when nested.

// up in Node's output if this results in an unhandled exception.

// update final size based on the range options

// update in completeNavigation

// update readableListening so that resume() may be a no-op

// update the buffer info.

// update v's predecessor in the predecessor list (it's now u).

// updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing

// uphold the illusion by pretending to see that original data

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// use React's forwardRef to expose a ref of the wrapped component

// use a weak comparison instead of 'instanceof' to allow

// use custom content-type above all

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// useLayoutEffect synchronously after the render phase before the next tick.

// useLayoutEffect(() => {

// useLayoutEffect: updating our span before browser paint

// used by the <ScrollRestoration> component

// used w/ getLengthSync(), when length is known.

// user handled the error, we can clear bookkept values

// user-provided array of options. Otherwise, it must be just the _first_ arg, and so

// user@server is *always* interpreted as a hostname, and url

// userland ones.  NEVER DO THIS. This is here only because this code needs

// userland will fail

// utils is a library of generic helper functions non-specific to axios

// v is greater than the new cost we just found (cost of s to u plus

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// v8 likes predictible objects

// valid lead

// valid surrogate pair

// validate a little.

// value at the end to obtain `delta`.

// value statically and permanently identifies the error. While the error

// value, and has a chance to attach a 'drain' listener.

// values for the readable and the writable sides of the duplex stream,

// values for the readable and the writable sides of the duplex stream.

// variables correct.

// verify that the dom selection is in the editor

// vertical

// very first line, add the line to the result.

// visible flicker.

// w/ a known file a size, and not wanting to wait for

// wait till response come back

// waiting to be emitted.

// wan't to early return out of the rest of the checks. However we can check

// want them tried.

// was removed from and where it was inserted. We have to adjust for this

// way to warn them about it since the page will refresh...

// way we handle calling loaders above the boundary etc.  It's not really

// way. Do not accept thenables that use a function as `obj` and that have no

// we can be expecting either 'end' or

// we can guarantee we have that here, because we control the

// we cannot guarantee that there is no error lingering around

// we defer if data is null

// we did not generate a valid codePoint so insert a

// we flow only if there is no one listening

// we have implemented the _read method, and done the other things

// we ignore all errors here, since when the component

// we ignore the value if the stream

// we know that it won't be needed anymore and we need to clear it

// we must ensure that previous needDrain will not be reset to false.

// we need it if the extension ends up not matching

// we need this to make sure size of hostname is not

// we reference arguments instead of spreading them for performance reasons

// we rely on the subscribers to do that so our tests can assert proper

// we remove it from the tree.

// we replace non-ASCII char with a temporary placeholder

// we set destroyed to true before firing error callbacks in order

// we short circuited because pendingNavigationController will have already

// we test again with ASCII char only

// we wait for the next tick, because it might

// we will wait for the previous Promise to finish

// we wrap it in an array so we can apply it.

// we've already handled the other stuff above.

// we've dumped the saga stack to string and are passing it to user's code

// we've indicated that there is a hostname,

// when 'finish' is emitted

// when <Editable/> is being controlled through external value

// when a corresponding condition is not met, with a message that

// when end specified

// when end() has been called, and returned

// when the dest drains, it reduces the awaitDrain counter

// when true all writes will be buffered until .uncork() call

// when we try to consume some more bytes, simply unpause the

// when when somebody has screwed with setTimeout but no I.E. maddness

// whenever we return null, then we set a flag to say

// where all of the continuation bytes for a character exist in the same buffer.

// where next() is only called once at a time

// whether mapToProps needs to be invoked when props have changed.

// whether the request URL is of the same origin as current location.

// which gets added to `i`. The overflow checking is easier

// which is checked by comparing their type tags.

// which may cause missed updates; we also must ensure the store subscription

// which will cause issues when scrolling to it.

// while a selection is being dragged.

// while rendering if we have pending changes.

// width space that will convert into a line break when copying and pasting

// width spacing character will result in an incorrect offset of 1

// will get processed, now that we've asked for it.

// will receive the previous state. This effectively populates

// will result in a (valid) protocol-relative url. However, this won't work if

// will result in an all-zero data string

// will return status as 0 even though it's a successful request

// will throw again, if neither props nor store state

// window event add

// window event remove

// with binary FormData so assign here and skip to handleLoaders.  That

// with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content

// with standard React renderers (ReactDOM, React Native)

// with whatever "extra arg" they want to inject into their thunks

// without limitation the rights to use, copy, modify, merge, publish,

// without swiftkey picking it up is the keydown event, so we have to hide it

// without triggering the next() queue

// without unwrapping

// word boundary but that gives false positives on routes like

// would be consumed, and then the rest would wait (un-transformed) until

// would return false, as no `_writableState` property is attached.

// wrap an old-style stream as the async data source.

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// write() some more.

// written chunk would result in multiple output chunks, then the first

// xor final data with mask pattern in order to ensure that

// year

// yield all of the matches after iterating.

// yield their first point. If the `voids` option is set to true,

// you call it with a domain that already is ASCII-only.

// you can override either this method, or the async _read(n) below.

// zoom in

// zoom out

// }

// }, [root]);

// };

// 一维当前图例下标

// 一维数组下标为 最后一个图例下标

// 二维当前数据下标

// 分组数据 最大分组值 || 数据数组 最大下标值

// 单组数据处理

// 堆叠 多组数据

// 多组数据 处理

// 当前偏移下标

// 当前水平线 代表数据值

// 未堆叠 多组数据

// 横向滚动条 element

// 水平线容器高度偏移 垂直居中值

// 纵向滚动条 element

// 给bar赋值样式

// 计算fn

// 设置水平线宽度

// 设置水平线描边颜色

// 设置虚线

//# sourceMappingURL=html-parse-stringify.js.map

//# sourceMappingURL=immer.cjs.production.min.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=router.cjs.js.map

//#endregion

//#region Browser History

//#region Hash History

//#region Helpers

//#region Memory History

//#region Types and Constants

//#region UTILS

//#region createRouter

//#region createStaticHandler

////////////////////////////////////////////////////////////////////////////////

//Cache miss

//btn visible

//normal enviroments in sane situations

//request interceptors

//respondent interceptors

//to support http.request

//to support request.http

//urlParse appends trailing / to urls like http://www.example.com

//以下属性 仅在custom的状态下生效

//是否做内部的交互

//溢出变点 状态判断

//等下看看这个

//结束的时候

//转化为blob

//这里添加翻译文件

//这里计算主容器的位置

//这里计算的三角形的坐标

//重复
